!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddAdvectionPenaltyFlux	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &Outarray)
AddAdvectionPenaltyFlux	BackUp/IncNavierStokes.h	/^        void AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &outarray)
AddAdvectionPenaltyFlux	IncNavierStokes.cpp	/^    void IncNavierStokes::AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &Outarray)
AddAdvectionPenaltyFlux	IncNavierStokes.h	/^        void AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &outarray)
AddDuDt	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt  (const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt	VelocityCorrectionScheme.h	/^            void AddDuDt  (const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt2D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt2D	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt2D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt2D	VelocityCorrectionScheme.h	/^            void AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt3D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt3D	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt3D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddDuDt3D	VelocityCorrectionScheme.h	/^            void AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
AddStressTimesNormalToVelocityNeumannBC	BackUp/ViscoElasticConstitutive.cpp	/^void  ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
AddStressTimesNormalToVelocityNeumannBC	BackUp/ViscoElasticConstitutive.h	/^void AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
AddStressTimesNormalToVelocityNeumannBC	ViscoElasticConstitutive.cpp	/^void  ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
AddStressTimesNormalToVelocityNeumannBC	ViscoElasticConstitutive.h	/^void AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
AdvanceInTime	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::AdvanceInTime(int nsteps)$/;"	f	class:Nektar::IncNavierStokes	signature:(int nsteps)
AdvanceInTime	BackUp/IncNavierStokes.h	/^        void AdvanceInTime(int nsteps);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(int nsteps)
AdvanceInTime	IncNavierStokes.cpp	/^    void IncNavierStokes::AdvanceInTime(int nsteps)$/;"	f	class:Nektar::IncNavierStokes	signature:(int nsteps)
AdvanceInTime	IncNavierStokes.h	/^        void AdvanceInTime(int nsteps);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(int nsteps)
AdvectionForm	BackUp/IncNavierStokes.h	/^    enum AdvectionForm$/;"	g	namespace:Nektar
AdvectionForm	IncNavierStokes.h	/^    enum AdvectionForm$/;"	g	namespace:Nektar
CalcPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs	VelocityCorrectionScheme.h	/^        void CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs2D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs2D	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs2D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs2D	VelocityCorrectionScheme.h	/^        void CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs3D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs3D	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs3D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcPressureBCs3D	VelocityCorrectionScheme.h	/^        void CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
CalcSteadyState	BackUp/IncNavierStokes.cpp	/^    bool IncNavierStokes::CalcSteadyState(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
CalcSteadyState	BackUp/IncNavierStokes.h	/^        bool CalcSteadyState(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
CalcSteadyState	IncNavierStokes.cpp	/^    bool IncNavierStokes::CalcSteadyState(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
CalcSteadyState	IncNavierStokes.h	/^        bool CalcSteadyState(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Continuation	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::Continuation(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Continuation	BackUp/CoupledLinearNS.h	/^        void Continuation(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Continuation	CoupledLinearNS.cpp	/^    void CoupledLinearNS::Continuation(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Continuation	CoupledLinearNS.h	/^        void Continuation(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
CoupledLinearNS	BackUp/CoupledLinearNS.cpp	/^    CoupledLinearNS::CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSession):$/;"	f	class:Nektar::CoupledLinearNS	signature:(const LibUtilities::SessionReaderSharedPtr &pSession)
CoupledLinearNS	BackUp/CoupledLinearNS.h	/^        CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSesssion);$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr &pSesssion)
CoupledLinearNS	BackUp/CoupledLinearNS.h	/^    class CoupledLinearNS: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
CoupledLinearNS	CoupledLinearNS.cpp	/^    CoupledLinearNS::CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSession):$/;"	f	class:Nektar::CoupledLinearNS	signature:(const LibUtilities::SessionReaderSharedPtr &pSession)
CoupledLinearNS	CoupledLinearNS.h	/^        CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSesssion);$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr &pSesssion)
CoupledLinearNS	CoupledLinearNS.h	/^    class CoupledLinearNS: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.cpp	/^    CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap($/;"	f	class:Nektar::CoupledLocalToGlobalC0ContMap	signature:( const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheckforSingularSys)
CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.h	/^        CoupledLocalToGlobalC0ContMap(const LibUtilities::SessionReaderSharedPtr &pSession,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheeckForSingularSys=true)
CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.h	/^    class CoupledLocalToGlobalC0ContMap: public MultiRegions::AssemblyMapCG2D$/;"	c	namespace:Nektar	inherits:MultiRegions::AssemblyMapCG2D
CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.cpp	/^    CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap($/;"	f	class:Nektar::CoupledLocalToGlobalC0ContMap	signature:( const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheckforSingularSys)
CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.h	/^        CoupledLocalToGlobalC0ContMap(const LibUtilities::SessionReaderSharedPtr &pSession,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheeckForSingularSys=true)
CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.h	/^    class CoupledLocalToGlobalC0ContMap: public MultiRegions::AssemblyMapCG2D$/;"	c	namespace:Nektar	inherits:MultiRegions::AssemblyMapCG2D
CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure	BackUp/CoupledLocalToGlobalC0ContMap.cpp	/^void CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	f	class:CoupledLocalToGlobalC0ContMap	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure	CoupledLocalToGlobalC0ContMap.cpp	/^void CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	f	class:CoupledLocalToGlobalC0ContMap	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
CoupledLocalToGlobalC0ContMapSharedPtr	BackUp/CoupledLocalToGlobalC0ContMap.h	/^    typedef boost::shared_ptr<CoupledLocalToGlobalC0ContMap> CoupledLocalToGlobalC0ContMapSharedPtr;$/;"	t	namespace:Nektar
CoupledLocalToGlobalC0ContMapSharedPtr	CoupledLocalToGlobalC0ContMap.h	/^    typedef boost::shared_ptr<CoupledLocalToGlobalC0ContMap> CoupledLocalToGlobalC0ContMapSharedPtr;$/;"	t	namespace:Nektar
CoupledSolverMatrices	BackUp/CoupledLinearNS.h	/^    } CoupledSolverMatrices;$/;"	t	namespace:Nektar	typeref:struct:Nektar::coupledSolverMatrices
CoupledSolverMatrices	CoupledLinearNS.h	/^    } CoupledSolverMatrices;$/;"	t	namespace:Nektar	typeref:struct:Nektar::coupledSolverMatrices
DefineForcingTerm	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::DefineForcingTerm(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
DefineForcingTerm	BackUp/CoupledLinearNS.h	/^        void DefineForcingTerm(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
DefineForcingTerm	CoupledLinearNS.cpp	/^    void CoupledLinearNS::DefineForcingTerm(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
DefineForcingTerm	CoupledLinearNS.h	/^        void DefineForcingTerm(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
EquationType	BackUp/IncNavierStokes.h	/^    enum EquationType$/;"	g	namespace:Nektar
EquationType	IncNavierStokes.h	/^    enum EquationType$/;"	g	namespace:Nektar
EvaluateAdvection	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection	BackUp/CoupledLinearNS.h	/^        void EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection	CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection	CoupledLinearNS.h	/^        void EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvectionTerms	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::EvaluateAdvectionTerms(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk)
EvaluateAdvectionTerms	BackUp/IncNavierStokes.h	/^        void EvaluateAdvectionTerms(const Array<OneD, $/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk = NullNekDouble1DArray)
EvaluateAdvectionTerms	IncNavierStokes.cpp	/^    void IncNavierStokes::EvaluateAdvectionTerms(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk)
EvaluateAdvectionTerms	IncNavierStokes.h	/^        void EvaluateAdvectionTerms(const Array<OneD, $/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk = NullNekDouble1DArray)
EvaluateAdvection_SetPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection_SetPressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection_SetPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateAdvection_SetPressureBCs	VelocityCorrectionScheme.h	/^            void EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateNewtonRHS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
EvaluateNewtonRHS	BackUp/CoupledLinearNS.h	/^        void EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
EvaluateNewtonRHS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
EvaluateNewtonRHS	CoupledLinearNS.h	/^        void EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
EvaluatePressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluatePressureBCs(const Array<OneD, const Array<OneD, NekDouble> >  &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N, const NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N, const NekDouble Aii_Dt)
EvaluatePressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void EvaluatePressureBCs(const Array<OneD, const Array< OneD,  NekDouble> > &fields, const Array<OneD, const Array< OneD,  NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array< OneD, NekDouble> > &fields, const Array<OneD, const Array< OneD, NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble)
EvaluatePressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluatePressureBCs(const Array<OneD, const Array<OneD, NekDouble> >  &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N, const NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N, const NekDouble Aii_Dt)
EvaluatePressureBCs	VelocityCorrectionScheme.h	/^            void EvaluatePressureBCs(const Array<OneD, const Array< OneD,  NekDouble> > &fields, const Array<OneD, const Array< OneD,  NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array< OneD, NekDouble> > &fields, const Array<OneD, const Array< OneD, NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &fields, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &fields, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	BackUp/ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	BackUp/ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarrayCoeffs, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarrayCoeffs, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
FillHOPBCMap	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::FillHOPBCMap(const int HOPBCnumber)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const int HOPBCnumber)
FillHOPBCMap	BackUp/VelocityCorrectionScheme.h	/^        void FillHOPBCMap(const int HOPBCnumber);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const int HOPBCnumber)
FillHOPBCMap	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::FillHOPBCMap(const int HOPBCnumber)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const int HOPBCnumber)
FillHOPBCMap	VelocityCorrectionScheme.h	/^        void FillHOPBCMap(const int HOPBCnumber);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const int HOPBCnumber)
FindEdgeIdToAddMeanPressure	BackUp/CoupledLocalToGlobalC0ContMap.cpp	/^void CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	f	class:CoupledLocalToGlobalC0ContMap	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
FindEdgeIdToAddMeanPressure	BackUp/CoupledLocalToGlobalC0ContMap.h	/^		void FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
FindEdgeIdToAddMeanPressure	CoupledLocalToGlobalC0ContMap.cpp	/^void CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	f	class:CoupledLocalToGlobalC0ContMap	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
FindEdgeIdToAddMeanPressure	CoupledLocalToGlobalC0ContMap.h	/^		void FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
GenPressureExp	BackUp/CoupledLinearNS.cpp	/^    const SpatialDomains::ExpansionMap &CoupledLinearNS::GenPressureExp(const SpatialDomains::ExpansionMap &VelExp)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const SpatialDomains::ExpansionMap &VelExp)
GenPressureExp	BackUp/CoupledLinearNS.h	/^        const SpatialDomains::ExpansionMap &GenPressureExp(const SpatialDomains::ExpansionMap &VelExp);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const SpatialDomains::ExpansionMap &VelExp)
GenPressureExp	CoupledLinearNS.cpp	/^    const SpatialDomains::ExpansionMap &CoupledLinearNS::GenPressureExp(const SpatialDomains::ExpansionMap &VelExp)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const SpatialDomains::ExpansionMap &VelExp)
GenPressureExp	CoupledLinearNS.h	/^        const SpatialDomains::ExpansionMap &GenPressureExp(const SpatialDomains::ExpansionMap &VelExp);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const SpatialDomains::ExpansionMap &VelExp)
GetEquationType	BackUp/IncNavierStokes.h	/^        EquationType GetEquationType(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
GetEquationType	IncNavierStokes.h	/^        EquationType GetEquationType(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
GetStdVelocity	BackUp/IncNavierStokes.cpp	/^    Array<OneD, NekDouble> IncNavierStokes::GetStdVelocity($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
GetStdVelocity	BackUp/IncNavierStokes.h	/^        Array<OneD,NekDouble> GetStdVelocity($/;"	p	class:Nektar::IncNavierStokes	access:public	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
GetStdVelocity	IncNavierStokes.cpp	/^    Array<OneD, NekDouble> IncNavierStokes::GetStdVelocity($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
GetStdVelocity	IncNavierStokes.h	/^        Array<OneD,NekDouble> GetStdVelocity($/;"	p	class:Nektar::IncNavierStokes	access:public	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
GetSubstepTimeStep	BackUp/IncNavierStokes.cpp	/^    NekDouble IncNavierStokes::GetSubstepTimeStep()$/;"	f	class:Nektar::IncNavierStokes	signature:()
GetSubstepTimeStep	BackUp/IncNavierStokes.h	/^        NekDouble GetSubstepTimeStep();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
GetSubstepTimeStep	IncNavierStokes.cpp	/^    NekDouble IncNavierStokes::GetSubstepTimeStep()$/;"	f	class:Nektar::IncNavierStokes	signature:()
GetSubstepTimeStep	IncNavierStokes.h	/^        NekDouble GetSubstepTimeStep();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
HBCInfo	BackUp/VelocityCorrectionScheme.h	/^    struct HBCInfo$/;"	s	namespace:Nektar
HBCInfo	VelocityCorrectionScheme.h	/^    struct HBCInfo$/;"	s	namespace:Nektar
IncNavierStokes	BackUp/IncNavierStokes.cpp	/^    IncNavierStokes::IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::IncNavierStokes	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
IncNavierStokes	BackUp/IncNavierStokes.h	/^        IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
IncNavierStokes	BackUp/IncNavierStokes.h	/^    class IncNavierStokes: public SolverUtils::UnsteadySystem$/;"	c	namespace:Nektar	inherits:SolverUtils::UnsteadySystem
IncNavierStokes	IncNavierStokes.cpp	/^    IncNavierStokes::IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::IncNavierStokes	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
IncNavierStokes	IncNavierStokes.h	/^        IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
IncNavierStokes	IncNavierStokes.h	/^    class IncNavierStokes: public SolverUtils::UnsteadySystem$/;"	c	namespace:Nektar	inherits:SolverUtils::UnsteadySystem
IncNavierStokesSharedPtr	BackUp/IncNavierStokes.h	/^    typedef boost::shared_ptr<IncNavierStokes> IncNavierStokesSharedPtr;$/;"	t	namespace:Nektar
IncNavierStokesSharedPtr	IncNavierStokes.h	/^    typedef boost::shared_ptr<IncNavierStokes> IncNavierStokesSharedPtr;$/;"	t	namespace:Nektar
InfNorm	BackUp/CoupledLinearNS.cpp	/^    void  CoupledLinearNS::InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
InfNorm	BackUp/CoupledLinearNS.h	/^        void InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
InfNorm	CoupledLinearNS.cpp	/^    void  CoupledLinearNS::InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
InfNorm	CoupledLinearNS.h	/^        void InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
IntToStr	BackUp/IncNavierStokes.cpp	/^string IntToStr(int n) $/;"	f	signature:(int n)
IntToStr	IncNavierStokes.cpp	/^string IntToStr(int n) $/;"	f	signature:(int n)
L2Norm	BackUp/CoupledLinearNS.cpp	/^    void  CoupledLinearNS::L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
L2Norm	BackUp/CoupledLinearNS.h	/^        void L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
L2Norm	CoupledLinearNS.cpp	/^    void  CoupledLinearNS::L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
L2Norm	CoupledLinearNS.h	/^        void L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
NEKTAR_SOLVERS_COUPLEDLOCALTOGLOBALC0CONTMAP_H	BackUp/CoupledLocalToGlobalC0ContMap.h	38;"	d
NEKTAR_SOLVERS_COUPLEDLOCALTOGLOBALC0CONTMAP_H	CoupledLocalToGlobalC0ContMap.h	38;"	d
NEKTAR_SOLVERS_COUPLEDSTOKESSCHEME_H	BackUp/CoupledLinearNS.h	37;"	d
NEKTAR_SOLVERS_COUPLEDSTOKESSCHEME_H	CoupledLinearNS.h	37;"	d
NEKTAR_SOLVERS_INCNAVIERSTOKES_H	BackUp/IncNavierStokes.h	37;"	d
NEKTAR_SOLVERS_INCNAVIERSTOKES_H	IncNavierStokes.h	37;"	d
NEKTAR_SOLVERS_VELOCITYCORRECTIONSCHEME_H	BackUp/VelocityCorrectionScheme.h	37;"	d
NEKTAR_SOLVERS_VELOCITYCORRECTIONSCHEME_H	VelocityCorrectionScheme.h	37;"	d
NEKTAR_SOLVERS_ViscoElasticConstitutive_H	BackUp/ViscoElasticConstitutive.h	38;"	d
NEKTAR_SOLVERS_ViscoElasticConstitutive_H	ViscoElasticConstitutive.h	38;"	d
Nektar	BackUp/CoupledLinearNS.cpp	/^namespace Nektar$/;"	n	file:
Nektar	BackUp/CoupledLinearNS.h	/^namespace Nektar$/;"	n
Nektar	BackUp/CoupledLocalToGlobalC0ContMap.cpp	/^namespace Nektar$/;"	n	file:
Nektar	BackUp/CoupledLocalToGlobalC0ContMap.h	/^namespace Nektar$/;"	n
Nektar	BackUp/IncNavierStokes.cpp	/^namespace Nektar$/;"	n	file:
Nektar	BackUp/IncNavierStokes.h	/^namespace Nektar$/;"	n
Nektar	BackUp/VelocityCorrectionScheme.cpp	/^namespace Nektar$/;"	n	file:
Nektar	BackUp/VelocityCorrectionScheme.h	/^namespace Nektar$/;"	n
Nektar	BackUp/ViscoElasticConstitutive.cpp	/^namespace Nektar$/;"	n	file:
Nektar	BackUp/ViscoElasticConstitutive.h	/^namespace Nektar$/;"	n
Nektar	CoupledLinearNS.cpp	/^namespace Nektar$/;"	n	file:
Nektar	CoupledLinearNS.h	/^namespace Nektar$/;"	n
Nektar	CoupledLocalToGlobalC0ContMap.cpp	/^namespace Nektar$/;"	n	file:
Nektar	CoupledLocalToGlobalC0ContMap.h	/^namespace Nektar$/;"	n
Nektar	IncNavierStokes.cpp	/^namespace Nektar$/;"	n	file:
Nektar	IncNavierStokes.h	/^namespace Nektar$/;"	n
Nektar	VelocityCorrectionScheme.cpp	/^namespace Nektar$/;"	n	file:
Nektar	VelocityCorrectionScheme.h	/^namespace Nektar$/;"	n
Nektar	ViscoElasticConstitutive.cpp	/^namespace Nektar$/;"	n	file:
Nektar	ViscoElasticConstitutive.h	/^namespace Nektar$/;"	n
Nektar::AdvectionForm	BackUp/IncNavierStokes.h	/^    enum AdvectionForm$/;"	g	namespace:Nektar
Nektar::AdvectionForm	IncNavierStokes.h	/^    enum AdvectionForm$/;"	g	namespace:Nektar
Nektar::CoupledLinearNS	BackUp/CoupledLinearNS.h	/^    class CoupledLinearNS: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
Nektar::CoupledLinearNS	CoupledLinearNS.h	/^    class CoupledLinearNS: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
Nektar::CoupledLinearNS::Continuation	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::Continuation(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::Continuation	BackUp/CoupledLinearNS.h	/^        void Continuation(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::Continuation	CoupledLinearNS.cpp	/^    void CoupledLinearNS::Continuation(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::Continuation	CoupledLinearNS.h	/^        void Continuation(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::CoupledLinearNS	BackUp/CoupledLinearNS.cpp	/^    CoupledLinearNS::CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSession):$/;"	f	class:Nektar::CoupledLinearNS	signature:(const LibUtilities::SessionReaderSharedPtr &pSession)
Nektar::CoupledLinearNS::CoupledLinearNS	BackUp/CoupledLinearNS.h	/^        CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSesssion);$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr &pSesssion)
Nektar::CoupledLinearNS::CoupledLinearNS	CoupledLinearNS.cpp	/^    CoupledLinearNS::CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSession):$/;"	f	class:Nektar::CoupledLinearNS	signature:(const LibUtilities::SessionReaderSharedPtr &pSession)
Nektar::CoupledLinearNS::CoupledLinearNS	CoupledLinearNS.h	/^        CoupledLinearNS(const LibUtilities::SessionReaderSharedPtr &pSesssion);$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr &pSesssion)
Nektar::CoupledLinearNS::DefineForcingTerm	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::DefineForcingTerm(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::DefineForcingTerm	BackUp/CoupledLinearNS.h	/^        void DefineForcingTerm(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::DefineForcingTerm	CoupledLinearNS.cpp	/^    void CoupledLinearNS::DefineForcingTerm(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::DefineForcingTerm	CoupledLinearNS.h	/^        void DefineForcingTerm(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::EvaluateAdvection	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::CoupledLinearNS::EvaluateAdvection	BackUp/CoupledLinearNS.h	/^        void EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::CoupledLinearNS::EvaluateAdvection	CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::CoupledLinearNS::EvaluateAdvection	CoupledLinearNS.h	/^        void EvaluateAdvection(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::CoupledLinearNS::EvaluateNewtonRHS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::CoupledLinearNS::EvaluateNewtonRHS	BackUp/CoupledLinearNS.h	/^        void EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::CoupledLinearNS::EvaluateNewtonRHS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::CoupledLinearNS::EvaluateNewtonRHS	CoupledLinearNS.h	/^        void EvaluateNewtonRHS(Array<OneD, Array<OneD, NekDouble> > &Velocity,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Velocity, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::CoupledLinearNS::GenPressureExp	BackUp/CoupledLinearNS.cpp	/^    const SpatialDomains::ExpansionMap &CoupledLinearNS::GenPressureExp(const SpatialDomains::ExpansionMap &VelExp)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const SpatialDomains::ExpansionMap &VelExp)
Nektar::CoupledLinearNS::GenPressureExp	BackUp/CoupledLinearNS.h	/^        const SpatialDomains::ExpansionMap &GenPressureExp(const SpatialDomains::ExpansionMap &VelExp);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const SpatialDomains::ExpansionMap &VelExp)
Nektar::CoupledLinearNS::GenPressureExp	CoupledLinearNS.cpp	/^    const SpatialDomains::ExpansionMap &CoupledLinearNS::GenPressureExp(const SpatialDomains::ExpansionMap &VelExp)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const SpatialDomains::ExpansionMap &VelExp)
Nektar::CoupledLinearNS::GenPressureExp	CoupledLinearNS.h	/^        const SpatialDomains::ExpansionMap &GenPressureExp(const SpatialDomains::ExpansionMap &VelExp);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const SpatialDomains::ExpansionMap &VelExp)
Nektar::CoupledLinearNS::InfNorm	BackUp/CoupledLinearNS.cpp	/^    void  CoupledLinearNS::InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::InfNorm	BackUp/CoupledLinearNS.h	/^        void InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::InfNorm	CoupledLinearNS.cpp	/^    void  CoupledLinearNS::InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::InfNorm	CoupledLinearNS.h	/^        void InfNorm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::L2Norm	BackUp/CoupledLinearNS.cpp	/^    void  CoupledLinearNS::L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::L2Norm	BackUp/CoupledLinearNS.h	/^        void L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::L2Norm	CoupledLinearNS.cpp	/^    void  CoupledLinearNS::L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	f	class:Nektar::CoupledLinearNS	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::L2Norm	CoupledLinearNS.h	/^        void L2Norm(Array<OneD, Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &inarray, Array<OneD, NekDouble> &outarray)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	BackUp/CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda = 0.0, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const NekDouble lambda = 0.0, const Array< OneD, Array<OneD, NekDouble> > &Advfield = NullNekDoubleArrayofArray, bool IsLinearNSEquation = true)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	BackUp/CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda, $/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(const NekDouble lambda, const Array< OneD, Array<OneD, NekDouble> > &Advfield, bool IsLinearNSEquation, const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag = NekConstants::kNekUnsetDouble)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda = 0.0, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const NekDouble lambda = 0.0, const Array< OneD, Array<OneD, NekDouble> > &Advfield = NullNekDoubleArrayofArray, bool IsLinearNSEquation = true)
Nektar::CoupledLinearNS::SetUpCoupledMatrix	CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda, $/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(const NekDouble lambda, const Array< OneD, Array<OneD, NekDouble> > &Advfield, bool IsLinearNSEquation, const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag = NekConstants::kNekUnsetDouble)
Nektar::CoupledLinearNS::Solve	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::Solve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::Solve	BackUp/CoupledLinearNS.h	/^        void Solve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::Solve	CoupledLinearNS.cpp	/^    void CoupledLinearNS::Solve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::Solve	CoupledLinearNS.h	/^        void Solve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::SolveLinearNS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
Nektar::CoupledLinearNS::SolveLinearNS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,  Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure,  const int mode)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int mode)
Nektar::CoupledLinearNS::SolveLinearNS	BackUp/CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
Nektar::CoupledLinearNS::SolveLinearNS	BackUp/CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int HomogeneousMode = 0)
Nektar::CoupledLinearNS::SolveLinearNS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
Nektar::CoupledLinearNS::SolveLinearNS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,  Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure,  const int mode)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int mode)
Nektar::CoupledLinearNS::SolveLinearNS	CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
Nektar::CoupledLinearNS::SolveLinearNS	CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int HomogeneousMode = 0)
Nektar::CoupledLinearNS::SolveSteadyNavierStokes	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveSteadyNavierStokes(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::SolveSteadyNavierStokes	BackUp/CoupledLinearNS.h	/^        void SolveSteadyNavierStokes(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::SolveSteadyNavierStokes	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveSteadyNavierStokes(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::SolveSteadyNavierStokes	CoupledLinearNS.h	/^        void SolveSteadyNavierStokes(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Nektar::CoupledLinearNS::SolveUnsteadyStokesSystem	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::CoupledLinearNS::SolveUnsteadyStokesSystem	BackUp/CoupledLinearNS.h	/^        void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
Nektar::CoupledLinearNS::SolveUnsteadyStokesSystem	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::CoupledLinearNS::SolveUnsteadyStokesSystem	CoupledLinearNS.h	/^        void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
Nektar::CoupledLinearNS::className	BackUp/CoupledLinearNS.cpp	/^    string CoupledLinearNS::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("CoupledLinearisedNS", CoupledLinearNS::create);$/;"	m	class:Nektar::CoupledLinearNS	file:
Nektar::CoupledLinearNS::className	BackUp/CoupledLinearNS.h	/^        static std::string className;        $/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::className	CoupledLinearNS.cpp	/^    string CoupledLinearNS::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("CoupledLinearisedNS", CoupledLinearNS::create);$/;"	m	class:Nektar::CoupledLinearNS	file:
Nektar::CoupledLinearNS::className	CoupledLinearNS.h	/^        static std::string className;        $/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::create	BackUp/CoupledLinearNS.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::CoupledLinearNS	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::CoupledLinearNS::create	CoupledLinearNS.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::CoupledLinearNS	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::CoupledLinearNS::m_ForcingTerm	BackUp/CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_ForcingTerm	CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_ForcingTerm_Coeffs	BackUp/CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm_Coeffs;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_ForcingTerm_Coeffs	CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm_Coeffs;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_KinvisPercentage	BackUp/CoupledLinearNS.h	/^        NekDouble m_KinvisPercentage;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_KinvisPercentage	CoupledLinearNS.h	/^        NekDouble m_KinvisPercentage;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_MatrixSetUpStep	BackUp/CoupledLinearNS.h	/^        int m_MatrixSetUpStep; $/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_MatrixSetUpStep	CoupledLinearNS.h	/^        int m_MatrixSetUpStep; $/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_Restart	BackUp/CoupledLinearNS.h	/^        int m_Restart;    \/\/ 0=Stokes solution as init guess; 1=Restart.cont as init guess$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_Restart	CoupledLinearNS.h	/^        int m_Restart;    \/\/ 0=Stokes solution as init guess; 1=Restart.cont as init guess$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_counter	BackUp/CoupledLinearNS.h	/^        int m_counter;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_counter	CoupledLinearNS.h	/^        int m_counter;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_initialStep	BackUp/CoupledLinearNS.h	/^        bool m_initialStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_initialStep	CoupledLinearNS.h	/^        bool m_initialStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_kinvisMin	BackUp/CoupledLinearNS.h	/^        NekDouble m_kinvisMin;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_kinvisMin	CoupledLinearNS.h	/^        NekDouble m_kinvisMin;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_kinvisStep	BackUp/CoupledLinearNS.h	/^        NekDouble m_kinvisStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_kinvisStep	CoupledLinearNS.h	/^        NekDouble m_kinvisStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_locToGloMap	BackUp/CoupledLinearNS.h	/^        Array<OneD, CoupledLocalToGlobalC0ContMapSharedPtr> m_locToGloMap;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_locToGloMap	CoupledLinearNS.h	/^        Array<OneD, CoupledLocalToGlobalC0ContMapSharedPtr> m_locToGloMap;$/;"	m	class:Nektar::CoupledLinearNS	access:public
Nektar::CoupledLinearNS::m_mat	BackUp/CoupledLinearNS.h	/^        Array<OneD, CoupledSolverMatrices> m_mat;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_mat	CoupledLinearNS.h	/^        Array<OneD, CoupledSolverMatrices> m_mat;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_maxIt	BackUp/CoupledLinearNS.h	/^        int m_maxIt;           \/\/ Max number of iteration$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_maxIt	CoupledLinearNS.h	/^        int m_maxIt;           \/\/ Max number of iteration$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_singleMode	BackUp/CoupledLinearNS.h	/^        bool m_singleMode; $/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_singleMode	CoupledLinearNS.h	/^        bool m_singleMode; $/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_tol	BackUp/CoupledLinearNS.h	/^        NekDouble   m_tol;        \/\/ Tolerence$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_tol	CoupledLinearNS.h	/^        NekDouble   m_tol;        \/\/ Tolerence$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_zeroMode	BackUp/CoupledLinearNS.h	/^        bool m_zeroMode;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::m_zeroMode	CoupledLinearNS.h	/^        bool m_zeroMode;$/;"	m	class:Nektar::CoupledLinearNS	access:private
Nektar::CoupledLinearNS::v_DoInitialise	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoInitialise(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_DoInitialise	BackUp/CoupledLinearNS.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_DoInitialise	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoInitialise(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_DoInitialise	CoupledLinearNS.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_DoSolve	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoSolve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_DoSolve	BackUp/CoupledLinearNS.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_DoSolve	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoSolve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_DoSolve	CoupledLinearNS.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_GetForceDimension	BackUp/CoupledLinearNS.cpp	/^    int CoupledLinearNS::v_GetForceDimension()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
Nektar::CoupledLinearNS::v_GetForceDimension	BackUp/CoupledLinearNS.h	/^        virtual int v_GetForceDimension(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_GetForceDimension	CoupledLinearNS.cpp	/^    int CoupledLinearNS::v_GetForceDimension()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
Nektar::CoupledLinearNS::v_GetForceDimension	CoupledLinearNS.h	/^        virtual int v_GetForceDimension(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_InitObject	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_InitObject()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
Nektar::CoupledLinearNS::v_InitObject	BackUp/CoupledLinearNS.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:()
Nektar::CoupledLinearNS::v_InitObject	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_InitObject()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
Nektar::CoupledLinearNS::v_InitObject	CoupledLinearNS.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:()
Nektar::CoupledLinearNS::v_Output	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_Output(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_Output	BackUp/CoupledLinearNS.h	/^        virtual void v_Output(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_Output	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_Output(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_Output	CoupledLinearNS.h	/^        virtual void v_Output(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_PrintSummary	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::CoupledLinearNS	signature:(std::ostream &out)
Nektar::CoupledLinearNS::v_PrintSummary	BackUp/CoupledLinearNS.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(std::ostream &out)
Nektar::CoupledLinearNS::v_PrintSummary	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::CoupledLinearNS	signature:(std::ostream &out)
Nektar::CoupledLinearNS::v_PrintSummary	CoupledLinearNS.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(std::ostream &out)
Nektar::CoupledLinearNS::v_TransCoeffToPhys	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransCoeffToPhys(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_TransCoeffToPhys	BackUp/CoupledLinearNS.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_TransCoeffToPhys	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransCoeffToPhys(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_TransCoeffToPhys	CoupledLinearNS.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_TransPhysToCoeff	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransPhysToCoeff(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_TransPhysToCoeff	BackUp/CoupledLinearNS.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLinearNS::v_TransPhysToCoeff	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransPhysToCoeff(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Nektar::CoupledLinearNS::v_TransPhysToCoeff	CoupledLinearNS.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
Nektar::CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.h	/^    class CoupledLocalToGlobalC0ContMap: public MultiRegions::AssemblyMapCG2D$/;"	c	namespace:Nektar	inherits:MultiRegions::AssemblyMapCG2D
Nektar::CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.h	/^    class CoupledLocalToGlobalC0ContMap: public MultiRegions::AssemblyMapCG2D$/;"	c	namespace:Nektar	inherits:MultiRegions::AssemblyMapCG2D
Nektar::CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.cpp	/^    CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap($/;"	f	class:Nektar::CoupledLocalToGlobalC0ContMap	signature:( const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheckforSingularSys)
Nektar::CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap	BackUp/CoupledLocalToGlobalC0ContMap.h	/^        CoupledLocalToGlobalC0ContMap(const LibUtilities::SessionReaderSharedPtr &pSession,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheeckForSingularSys=true)
Nektar::CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.cpp	/^    CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap($/;"	f	class:Nektar::CoupledLocalToGlobalC0ContMap	signature:( const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheckforSingularSys)
Nektar::CoupledLocalToGlobalC0ContMap::CoupledLocalToGlobalC0ContMap	CoupledLocalToGlobalC0ContMap.h	/^        CoupledLocalToGlobalC0ContMap(const LibUtilities::SessionReaderSharedPtr &pSession,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(const LibUtilities::SessionReaderSharedPtr &pSession, const SpatialDomains::MeshGraphSharedPtr &graph, const SpatialDomains::BoundaryConditionsSharedPtr &boundaryConditions, const Array<OneD, MultiRegions::ExpListSharedPtr> &fields, const MultiRegions::ExpListSharedPtr &pressure, const int nz_loc, const bool CheeckForSingularSys=true)
Nektar::CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure	BackUp/CoupledLocalToGlobalC0ContMap.h	/^		void FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
Nektar::CoupledLocalToGlobalC0ContMap::FindEdgeIdToAddMeanPressure	CoupledLocalToGlobalC0ContMap.h	/^		void FindEdgeIdToAddMeanPressure(Array<OneD, map<int,int> > &ReorderedGraphVertId,$/;"	p	class:Nektar::CoupledLocalToGlobalC0ContMap	access:public	signature:(Array<OneD, map<int,int> > &ReorderedGraphVertId, int &nel, const StdRegions::StdExpansionVector &locExpVector, int &edgeId, int &vertId, int &firstNonDirGraphVertId, map<int,int> &IsDirEdgeDof, MultiRegions::BottomUpSubStructuredGraphSharedPtr &bottomUpGraph, Array<OneD, int> &AddMeanPressureToEdgeId)
Nektar::CoupledLocalToGlobalC0ContMapSharedPtr	BackUp/CoupledLocalToGlobalC0ContMap.h	/^    typedef boost::shared_ptr<CoupledLocalToGlobalC0ContMap> CoupledLocalToGlobalC0ContMapSharedPtr;$/;"	t	namespace:Nektar
Nektar::CoupledLocalToGlobalC0ContMapSharedPtr	CoupledLocalToGlobalC0ContMap.h	/^    typedef boost::shared_ptr<CoupledLocalToGlobalC0ContMap> CoupledLocalToGlobalC0ContMapSharedPtr;$/;"	t	namespace:Nektar
Nektar::CoupledSolverMatrices	BackUp/CoupledLinearNS.h	/^    } CoupledSolverMatrices;$/;"	t	namespace:Nektar	typeref:struct:Nektar::coupledSolverMatrices
Nektar::CoupledSolverMatrices	CoupledLinearNS.h	/^    } CoupledSolverMatrices;$/;"	t	namespace:Nektar	typeref:struct:Nektar::coupledSolverMatrices
Nektar::EquationType	BackUp/IncNavierStokes.h	/^    enum EquationType$/;"	g	namespace:Nektar
Nektar::EquationType	IncNavierStokes.h	/^    enum EquationType$/;"	g	namespace:Nektar
Nektar::HBCInfo	BackUp/VelocityCorrectionScheme.h	/^    struct HBCInfo$/;"	s	namespace:Nektar
Nektar::HBCInfo	VelocityCorrectionScheme.h	/^    struct HBCInfo$/;"	s	namespace:Nektar
Nektar::HBCInfo::m_assPhysOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_assPhysOffset; \/\/ associated elments physical offset (k and k_c are the real and the complex plane)$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_assPhysOffset	VelocityCorrectionScheme.h	/^        int m_assPhysOffset; \/\/ associated elments physical offset (k and k_c are the real and the complex plane)$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_bndElmtOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_bndElmtOffset; \/\/ element offset in the boundary expansion$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_bndElmtOffset	VelocityCorrectionScheme.h	/^        int m_bndElmtOffset; \/\/ element offset in the boundary expansion$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_bndryElmtID	BackUp/VelocityCorrectionScheme.h	/^        int m_bndryElmtID;   \/\/ pressure boundary condition ID$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_bndryElmtID	VelocityCorrectionScheme.h	/^        int m_bndryElmtID;   \/\/ pressure boundary condition ID$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_coeffOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_coeffOffset;   \/\/ coefficients offset used to locate the acceleration term in the general m_pressureHBC$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_coeffOffset	VelocityCorrectionScheme.h	/^        int m_coeffOffset;   \/\/ coefficients offset used to locate the acceleration term in the general m_pressureHBC$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_elmtTraceID	BackUp/VelocityCorrectionScheme.h	/^        int m_elmtTraceID;   \/\/ trace ID on the element$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_elmtTraceID	VelocityCorrectionScheme.h	/^        int m_elmtTraceID;   \/\/ trace ID on the element$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_globalElmtID	BackUp/VelocityCorrectionScheme.h	/^        int m_globalElmtID;  \/\/ elements ID in the global ordering$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_globalElmtID	VelocityCorrectionScheme.h	/^        int m_globalElmtID;  \/\/ elements ID in the global ordering$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_physOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_physOffset;    \/\/ elmenent physical offset in the global list$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_physOffset	VelocityCorrectionScheme.h	/^        int m_physOffset;    \/\/ elmenent physical offset in the global list$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_ptsInElmt	BackUp/VelocityCorrectionScheme.h	/^        int m_ptsInElmt;     \/\/ number of physical points of the element$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::HBCInfo::m_ptsInElmt	VelocityCorrectionScheme.h	/^        int m_ptsInElmt;     \/\/ number of physical points of the element$/;"	m	struct:Nektar::HBCInfo	access:public
Nektar::IncNavierStokes	BackUp/IncNavierStokes.h	/^    class IncNavierStokes: public SolverUtils::UnsteadySystem$/;"	c	namespace:Nektar	inherits:SolverUtils::UnsteadySystem
Nektar::IncNavierStokes	IncNavierStokes.h	/^    class IncNavierStokes: public SolverUtils::UnsteadySystem$/;"	c	namespace:Nektar	inherits:SolverUtils::UnsteadySystem
Nektar::IncNavierStokes::AddAdvectionPenaltyFlux	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &Outarray)
Nektar::IncNavierStokes::AddAdvectionPenaltyFlux	BackUp/IncNavierStokes.h	/^        void AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::IncNavierStokes::AddAdvectionPenaltyFlux	IncNavierStokes.cpp	/^    void IncNavierStokes::AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &Outarray)
Nektar::IncNavierStokes::AddAdvectionPenaltyFlux	IncNavierStokes.h	/^        void AddAdvectionPenaltyFlux(const Array<OneD, const Array<OneD, NekDouble> > &velfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &velfield, const Array<OneD, const Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &outarray)
Nektar::IncNavierStokes::AdvanceInTime	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::AdvanceInTime(int nsteps)$/;"	f	class:Nektar::IncNavierStokes	signature:(int nsteps)
Nektar::IncNavierStokes::AdvanceInTime	BackUp/IncNavierStokes.h	/^        void AdvanceInTime(int nsteps);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(int nsteps)
Nektar::IncNavierStokes::AdvanceInTime	IncNavierStokes.cpp	/^    void IncNavierStokes::AdvanceInTime(int nsteps)$/;"	f	class:Nektar::IncNavierStokes	signature:(int nsteps)
Nektar::IncNavierStokes::AdvanceInTime	IncNavierStokes.h	/^        void AdvanceInTime(int nsteps);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(int nsteps)
Nektar::IncNavierStokes::CalcSteadyState	BackUp/IncNavierStokes.cpp	/^    bool IncNavierStokes::CalcSteadyState(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::CalcSteadyState	BackUp/IncNavierStokes.h	/^        bool CalcSteadyState(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::CalcSteadyState	IncNavierStokes.cpp	/^    bool IncNavierStokes::CalcSteadyState(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::CalcSteadyState	IncNavierStokes.h	/^        bool CalcSteadyState(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::EvaluateAdvectionTerms	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::EvaluateAdvectionTerms(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk)
Nektar::IncNavierStokes::EvaluateAdvectionTerms	BackUp/IncNavierStokes.h	/^        void EvaluateAdvectionTerms(const Array<OneD, $/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk = NullNekDouble1DArray)
Nektar::IncNavierStokes::EvaluateAdvectionTerms	IncNavierStokes.cpp	/^    void IncNavierStokes::EvaluateAdvectionTerms(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk)
Nektar::IncNavierStokes::EvaluateAdvectionTerms	IncNavierStokes.h	/^        void EvaluateAdvectionTerms(const Array<OneD, $/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, Array<OneD, NekDouble> &wk = NullNekDouble1DArray)
Nektar::IncNavierStokes::GetEquationType	BackUp/IncNavierStokes.h	/^        EquationType GetEquationType(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::GetEquationType	IncNavierStokes.h	/^        EquationType GetEquationType(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::GetStdVelocity	BackUp/IncNavierStokes.cpp	/^    Array<OneD, NekDouble> IncNavierStokes::GetStdVelocity($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
Nektar::IncNavierStokes::GetStdVelocity	BackUp/IncNavierStokes.h	/^        Array<OneD,NekDouble> GetStdVelocity($/;"	p	class:Nektar::IncNavierStokes	access:public	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
Nektar::IncNavierStokes::GetStdVelocity	IncNavierStokes.cpp	/^    Array<OneD, NekDouble> IncNavierStokes::GetStdVelocity($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
Nektar::IncNavierStokes::GetStdVelocity	IncNavierStokes.h	/^        Array<OneD,NekDouble> GetStdVelocity($/;"	p	class:Nektar::IncNavierStokes	access:public	signature:( const Array<OneD, Array<OneD,NekDouble> > inarray)
Nektar::IncNavierStokes::GetSubstepTimeStep	BackUp/IncNavierStokes.cpp	/^    NekDouble IncNavierStokes::GetSubstepTimeStep()$/;"	f	class:Nektar::IncNavierStokes	signature:()
Nektar::IncNavierStokes::GetSubstepTimeStep	BackUp/IncNavierStokes.h	/^        NekDouble GetSubstepTimeStep();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokes::GetSubstepTimeStep	IncNavierStokes.cpp	/^    NekDouble IncNavierStokes::GetSubstepTimeStep()$/;"	f	class:Nektar::IncNavierStokes	signature:()
Nektar::IncNavierStokes::GetSubstepTimeStep	IncNavierStokes.h	/^        NekDouble GetSubstepTimeStep();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokes::IncNavierStokes	BackUp/IncNavierStokes.cpp	/^    IncNavierStokes::IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::IncNavierStokes	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::IncNavierStokes::IncNavierStokes	BackUp/IncNavierStokes.h	/^        IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::IncNavierStokes::IncNavierStokes	IncNavierStokes.cpp	/^    IncNavierStokes::IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::IncNavierStokes	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::IncNavierStokes::IncNavierStokes	IncNavierStokes.h	/^        IncNavierStokes(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::IncNavierStokes::SetBoundaryConditions	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SetBoundaryConditions(NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble time)
Nektar::IncNavierStokes::SetBoundaryConditions	BackUp/IncNavierStokes.h	/^        void SetBoundaryConditions(NekDouble time);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(NekDouble time)
Nektar::IncNavierStokes::SetBoundaryConditions	IncNavierStokes.cpp	/^    void IncNavierStokes::SetBoundaryConditions(NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble time)
Nektar::IncNavierStokes::SetBoundaryConditions	IncNavierStokes.h	/^        void SetBoundaryConditions(NekDouble time);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(NekDouble time)
Nektar::IncNavierStokes::SubStepAdvance	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvance(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepAdvance	BackUp/IncNavierStokes.h	/^        void SubStepAdvance   (const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepAdvance	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvance(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepAdvance	IncNavierStokes.h	/^        void SubStepAdvance   (const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepAdvection	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvection($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepAdvection	BackUp/IncNavierStokes.h	/^        void SubStepAdvection (const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepAdvection	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvection($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepAdvection	IncNavierStokes.h	/^        void SubStepAdvection (const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepExtrapoloteField	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
Nektar::IncNavierStokes::SubStepExtrapoloteField	BackUp/IncNavierStokes.h	/^        void SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel);$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
Nektar::IncNavierStokes::SubStepExtrapoloteField	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
Nektar::IncNavierStokes::SubStepExtrapoloteField	IncNavierStokes.h	/^        void SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel);$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
Nektar::IncNavierStokes::SubStepProjection	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,  Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepProjection	BackUp/IncNavierStokes.h	/^        void SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepProjection	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,  Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepProjection	IncNavierStokes.h	/^        void SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::IncNavierStokes::SubStepSaveFields	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepSaveFields(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepSaveFields	BackUp/IncNavierStokes.h	/^        void SubStepSaveFields(const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepSaveFields	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepSaveFields(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
Nektar::IncNavierStokes::SubStepSaveFields	IncNavierStokes.h	/^        void SubStepSaveFields(const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
Nektar::IncNavierStokes::WriteModalEnergy	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::WriteModalEnergy(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::WriteModalEnergy	BackUp/IncNavierStokes.h	/^        void WriteModalEnergy(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::WriteModalEnergy	IncNavierStokes.cpp	/^    void IncNavierStokes::WriteModalEnergy(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::WriteModalEnergy	IncNavierStokes.h	/^        void WriteModalEnergy(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::m_CoeffState	BackUp/IncNavierStokes.h	/^        MultiRegions::CoeffState m_CoeffState;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_CoeffState	IncNavierStokes.h	/^        MultiRegions::CoeffState m_CoeffState;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_L	BackUp/IncNavierStokes.h	/^	NekDouble     m_L;        \/\/ length scale$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_L	IncNavierStokes.h	/^	NekDouble     m_L;        \/\/ length scale$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Mup	BackUp/IncNavierStokes.h	/^	NekDouble     m_Mup;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Mup	IncNavierStokes.h	/^	NekDouble     m_Mup;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Mus	BackUp/IncNavierStokes.h	/^	NekDouble     m_Mus;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Mus	IncNavierStokes.h	/^	NekDouble     m_Mus;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Re	BackUp/IncNavierStokes.h	/^        NekDouble     m_Re;        \/\/\/< Reynolds number$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Re	IncNavierStokes.h	/^        NekDouble     m_Re;        \/\/\/< Reynolds number$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReC	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReC;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReC	IncNavierStokes.h	/^        NekDouble     m_ReC;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM1	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM1;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM1	IncNavierStokes.h	/^        NekDouble     m_ReM1;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM2	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM2;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM2	IncNavierStokes.h	/^        NekDouble     m_ReM2;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM3	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM3;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM3	IncNavierStokes.h	/^        NekDouble     m_ReM3;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM4	BackUp/IncNavierStokes.h	/^	NekDouble     m_ReM4;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_ReM4	IncNavierStokes.h	/^	NekDouble     m_ReM4;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Rep	BackUp/IncNavierStokes.h	/^	NekDouble     m_Rep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Rep	IncNavierStokes.h	/^	NekDouble     m_Rep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Rmu	BackUp/IncNavierStokes.h	/^        NekDouble     m_Rmu;           \/\/\/< Ratio of Solvent Viscosity to total Viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Rmu	IncNavierStokes.h	/^        NekDouble     m_Rmu;           \/\/\/< Ratio of Solvent Viscosity to total Viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Ro	BackUp/IncNavierStokes.h	/^	NekDouble     m_Ro;       \/\/density $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_Ro	IncNavierStokes.h	/^	NekDouble     m_Ro;       \/\/density $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_SmoothAdvection	BackUp/IncNavierStokes.h	/^        bool m_SmoothAdvection; \/\/ bool to identify if advection term smoothing is requested $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_SmoothAdvection	IncNavierStokes.h	/^        bool m_SmoothAdvection; \/\/ bool to identify if advection term smoothing is requested $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_U	BackUp/IncNavierStokes.h	/^	NekDouble     m_U;         \/\/ mean velocity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_U	IncNavierStokes.h	/^	NekDouble     m_U;         \/\/ mean velocity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_We	BackUp/IncNavierStokes.h	/^        NekDouble     m_We;            \/\/\/< Weissenberg Number$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_We	IncNavierStokes.h	/^        NekDouble     m_We;            \/\/\/< Weissenberg Number$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_advObject	BackUp/IncNavierStokes.h	/^        AdvectionTermSharedPtr m_advObject;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_advObject	IncNavierStokes.h	/^        AdvectionTermSharedPtr m_advObject;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_energysteps	BackUp/IncNavierStokes.h	/^        int         m_energysteps;   \/\/\/< dump energy to file at steps time$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_energysteps	IncNavierStokes.h	/^        int         m_energysteps;   \/\/\/< dump energy to file at steps time$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_equationType	BackUp/IncNavierStokes.h	/^        EquationType  m_equationType;  \/\/\/< equation type;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_equationType	IncNavierStokes.h	/^        EquationType  m_equationType;  \/\/\/< equation type;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_intSteps	BackUp/IncNavierStokes.h	/^        int m_intSteps;  \/\/\/< Number of time integration steps AND  Order of extrapolation for pressure boundary conditions.         $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_intSteps	IncNavierStokes.h	/^        int m_intSteps;  \/\/\/< Number of time integration steps AND  Order of extrapolation for pressure boundary conditions.         $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_integrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_integrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps_aggregatesize	BackUp/IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps_aggregatesize	IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps_viscoelasticstress	BackUp/IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationOps_viscoelasticstress	IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationScheme	BackUp/IncNavierStokes.h	/^        Array<OneD, LibUtilities::TimeIntegrationSchemeSharedPtr> m_integrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationScheme	IncNavierStokes.h	/^        Array<OneD, LibUtilities::TimeIntegrationSchemeSharedPtr> m_integrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln_aggregatesize	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln_aggregatesize	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln_viscoelasticstress	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_integrationSoln_viscoelasticstress	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_kinvis	BackUp/IncNavierStokes.h	/^        NekDouble   m_kinvis;        \/\/\/< Kinematic viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_kinvis	IncNavierStokes.h	/^        NekDouble   m_kinvis;        \/\/\/< Kinematic viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_mdlFile	BackUp/IncNavierStokes.h	/^        std::ofstream m_mdlFile;  \/\/ modal energy file $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_mdlFile	IncNavierStokes.h	/^        std::ofstream m_mdlFile;  \/\/ modal energy file $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_nConvectiveFields	BackUp/IncNavierStokes.h	/^        int   m_nConvectiveFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_nConvectiveFields	IncNavierStokes.h	/^        int   m_nConvectiveFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_nViscoElasticStressFields	BackUp/IncNavierStokes.h	/^	int m_nViscoElasticStressFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_nViscoElasticStressFields	IncNavierStokes.h	/^	int m_nViscoElasticStressFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_numstep	BackUp/IncNavierStokes.h	/^	int m_numstep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_numstep	IncNavierStokes.h	/^	int m_numstep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_pressure	BackUp/IncNavierStokes.h	/^        MultiRegions::ExpListSharedPtr m_pressure;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_pressure	IncNavierStokes.h	/^        MultiRegions::ExpListSharedPtr m_pressure;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_previousVelFields	BackUp/IncNavierStokes.h	/^        Array<OneD, Array<OneD, NekDouble> > m_previousVelFields;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_previousVelFields	IncNavierStokes.h	/^        Array<OneD, Array<OneD, NekDouble> > m_previousVelFields;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_steadyStateSteps	BackUp/IncNavierStokes.h	/^        int         m_steadyStateSteps; \/\/\/< Check for steady state at step interval$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_steadyStateSteps	IncNavierStokes.h	/^        int         m_steadyStateSteps; \/\/\/< Check for steady state at step interval$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_steadyStateTol	BackUp/IncNavierStokes.h	/^        NekDouble   m_steadyStateTol; \/\/\/< Tolerance to which steady state should be evaluated at$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_steadyStateTol	IncNavierStokes.h	/^        NekDouble   m_steadyStateTol; \/\/\/< Tolerance to which steady state should be evaluated at$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subStepIntegrationOps	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_subStepIntegrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subStepIntegrationOps	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_subStepIntegrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subStepIntegrationScheme	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeSharedPtr m_subStepIntegrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subStepIntegrationScheme	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeSharedPtr m_subStepIntegrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subSteppingScheme	BackUp/IncNavierStokes.h	/^        bool m_subSteppingScheme; \/\/ bool to identify if using a substepping scheme$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_subSteppingScheme	IncNavierStokes.h	/^        bool m_subSteppingScheme; \/\/ bool to identify if using a substepping scheme$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_velocity	BackUp/IncNavierStokes.h	/^        Array<OneD, int> m_velocity; $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_velocity	IncNavierStokes.h	/^        Array<OneD, int> m_velocity; $/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_viscoelasticType	BackUp/IncNavierStokes.h	/^	ViscoElasticType m_viscoelasticType;   \/\/\/ViscoElastic Type$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::m_viscoelasticType	IncNavierStokes.h	/^	ViscoElasticType m_viscoelasticType;   \/\/\/ViscoElastic Type$/;"	m	class:Nektar::IncNavierStokes	access:protected
Nektar::IncNavierStokes::v_DoInitialise	BackUp/IncNavierStokes.h	/^        virtual void v_DoInitialise(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_DoInitialise	IncNavierStokes.h	/^        virtual void v_DoInitialise(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_DoSolve	BackUp/IncNavierStokes.h	/^        virtual void v_DoSolve(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_DoSolve	IncNavierStokes.h	/^        virtual void v_DoSolve(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_GetFluxVector	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_GetFluxVector(const int i, $/;"	f	class:Nektar::IncNavierStokes	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
Nektar::IncNavierStokes::v_GetFluxVector	BackUp/IncNavierStokes.h	/^        virtual void v_GetFluxVector(const int i, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
Nektar::IncNavierStokes::v_GetFluxVector	IncNavierStokes.cpp	/^    void IncNavierStokes::v_GetFluxVector(const int i, $/;"	f	class:Nektar::IncNavierStokes	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
Nektar::IncNavierStokes::v_GetFluxVector	IncNavierStokes.h	/^        virtual void v_GetFluxVector(const int i, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
Nektar::IncNavierStokes::v_GetPressure	BackUp/IncNavierStokes.h	/^        virtual MultiRegions::ExpListSharedPtr v_GetPressure()$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:()
Nektar::IncNavierStokes::v_GetPressure	IncNavierStokes.h	/^        virtual MultiRegions::ExpListSharedPtr v_GetPressure()$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:()
Nektar::IncNavierStokes::v_InitObject	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_InitObject()$/;"	f	class:Nektar::IncNavierStokes	signature:()
Nektar::IncNavierStokes::v_InitObject	BackUp/IncNavierStokes.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokes::v_InitObject	IncNavierStokes.cpp	/^    void IncNavierStokes::v_InitObject()$/;"	f	class:Nektar::IncNavierStokes	signature:()
Nektar::IncNavierStokes::v_InitObject	IncNavierStokes.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokes::v_NumericalFlux	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
Nektar::IncNavierStokes::v_NumericalFlux	BackUp/IncNavierStokes.h	/^        virtual void v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
Nektar::IncNavierStokes::v_NumericalFlux	IncNavierStokes.cpp	/^    void IncNavierStokes::v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
Nektar::IncNavierStokes::v_NumericalFlux	IncNavierStokes.h	/^        virtual void v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
Nektar::IncNavierStokes::v_PrintSummary	BackUp/IncNavierStokes.h	/^        virtual void v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(std::ostream &out)
Nektar::IncNavierStokes::v_PrintSummary	IncNavierStokes.h	/^        virtual void v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(std::ostream &out)
Nektar::IncNavierStokes::v_TransCoeffToPhys	BackUp/IncNavierStokes.h	/^        virtual void v_TransCoeffToPhys(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_TransCoeffToPhys	IncNavierStokes.h	/^        virtual void v_TransCoeffToPhys(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_TransPhysToCoeff	BackUp/IncNavierStokes.h	/^        virtual void v_TransPhysToCoeff(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::v_TransPhysToCoeff	IncNavierStokes.h	/^        virtual void v_TransPhysToCoeff(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
Nektar::IncNavierStokes::~IncNavierStokes	BackUp/IncNavierStokes.cpp	/^    IncNavierStokes::~IncNavierStokes(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::~IncNavierStokes	BackUp/IncNavierStokes.h	/^        virtual ~IncNavierStokes();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokes::~IncNavierStokes	IncNavierStokes.cpp	/^    IncNavierStokes::~IncNavierStokes(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
Nektar::IncNavierStokes::~IncNavierStokes	IncNavierStokes.h	/^        virtual ~IncNavierStokes();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
Nektar::IncNavierStokesSharedPtr	BackUp/IncNavierStokes.h	/^    typedef boost::shared_ptr<IncNavierStokes> IncNavierStokesSharedPtr;$/;"	t	namespace:Nektar
Nektar::IncNavierStokesSharedPtr	IncNavierStokes.h	/^    typedef boost::shared_ptr<IncNavierStokes> IncNavierStokesSharedPtr;$/;"	t	namespace:Nektar
Nektar::StifflyStable_Alpha_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Alpha_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
Nektar::StifflyStable_Alpha_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Alpha_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
Nektar::StifflyStable_Betaq_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Betaq_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
Nektar::StifflyStable_Betaq_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Betaq_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
Nektar::StifflyStable_Gamma0_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Gamma0_Coeffs[3]  = {1.0,  1.5, 11.0\/6.0};$/;"	m	namespace:Nektar
Nektar::StifflyStable_Gamma0_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Gamma0_Coeffs[3]  = {1.0,  1.5, 11.0\/6.0};$/;"	m	namespace:Nektar
Nektar::VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^    class VelocityCorrectionScheme: public  ViscoElasticConstitutive$/;"	c	namespace:Nektar	inherits:ViscoElasticConstitutive
Nektar::VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^    class VelocityCorrectionScheme: public  ViscoElasticConstitutive$/;"	c	namespace:Nektar	inherits:ViscoElasticConstitutive
Nektar::VelocityCorrectionScheme::AddDuDt	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt  (const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt	VelocityCorrectionScheme.h	/^            void AddDuDt  (const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt2D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt2D	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt2D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt2D	VelocityCorrectionScheme.h	/^            void AddDuDt2D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt3D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt3D	BackUp/VelocityCorrectionScheme.h	/^            void AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt3D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::AddDuDt3D	VelocityCorrectionScheme.h	/^            void AddDuDt3D(const Array<OneD, const Array<OneD, NekDouble> >  &N, NekDouble Aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &N, NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::CalcPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs	VelocityCorrectionScheme.h	/^        void CalcPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs2D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs2D	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs2D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs2D	VelocityCorrectionScheme.h	/^        void CalcPressureBCs2D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs3D	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs3D	BackUp/VelocityCorrectionScheme.h	/^        void CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs3D	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::CalcPressureBCs3D	VelocityCorrectionScheme.h	/^        void CalcPressureBCs3D(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N)
Nektar::VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::VelocityCorrectionScheme::EvaluateAdvection_SetPressureBCs	VelocityCorrectionScheme.h	/^            void EvaluateAdvection_SetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::VelocityCorrectionScheme::EvaluatePressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluatePressureBCs(const Array<OneD, const Array<OneD, NekDouble> >  &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N, const NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N, const NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::EvaluatePressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void EvaluatePressureBCs(const Array<OneD, const Array< OneD,  NekDouble> > &fields, const Array<OneD, const Array< OneD,  NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array< OneD, NekDouble> > &fields, const Array<OneD, const Array< OneD, NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble)
Nektar::VelocityCorrectionScheme::EvaluatePressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::EvaluatePressureBCs(const Array<OneD, const Array<OneD, NekDouble> >  &fields, const Array<OneD, const Array<OneD, NekDouble> >  &N, const NekDouble Aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, const Array<OneD, const Array<OneD, NekDouble> > &N, const NekDouble Aii_Dt)
Nektar::VelocityCorrectionScheme::EvaluatePressureBCs	VelocityCorrectionScheme.h	/^            void EvaluatePressureBCs(const Array<OneD, const Array< OneD,  NekDouble> > &fields, const Array<OneD, const Array< OneD,  NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array< OneD, NekDouble> > &fields, const Array<OneD, const Array< OneD, NekDouble> > &N, const NekDouble Aii_Dt = NekConstants::kNekUnsetDouble)
Nektar::VelocityCorrectionScheme::FillHOPBCMap	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::FillHOPBCMap(const int HOPBCnumber)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const int HOPBCnumber)
Nektar::VelocityCorrectionScheme::FillHOPBCMap	BackUp/VelocityCorrectionScheme.h	/^        void FillHOPBCMap(const int HOPBCnumber);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const int HOPBCnumber)
Nektar::VelocityCorrectionScheme::FillHOPBCMap	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::FillHOPBCMap(const int HOPBCnumber)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const int HOPBCnumber)
Nektar::VelocityCorrectionScheme::FillHOPBCMap	VelocityCorrectionScheme.h	/^        void FillHOPBCMap(const int HOPBCnumber);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(const int HOPBCnumber)
Nektar::VelocityCorrectionScheme::Rotate	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::Rotate($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( Array<OneD, Array<OneD, NekDouble> > &input)
Nektar::VelocityCorrectionScheme::Rotate	BackUp/VelocityCorrectionScheme.h	/^        void Rotate(Array<OneD, Array<OneD, NekDouble> > &input);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(Array<OneD, Array<OneD, NekDouble> > &input)
Nektar::VelocityCorrectionScheme::Rotate	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::Rotate($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( Array<OneD, Array<OneD, NekDouble> > &input)
Nektar::VelocityCorrectionScheme::Rotate	VelocityCorrectionScheme.h	/^        void Rotate(Array<OneD, Array<OneD, NekDouble> > &input);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(Array<OneD, Array<OneD, NekDouble> > &input)
Nektar::VelocityCorrectionScheme::SetUpPressureForcing	BackUp/VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpPressureForcing	BackUp/VelocityCorrectionScheme.h	/^            void SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpPressureForcing	VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpPressureForcing	VelocityCorrectionScheme.h	/^            void SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpViscousForcing	BackUp/VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpViscousForcing	BackUp/VelocityCorrectionScheme.h	/^            void SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpViscousForcing	VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SetUpViscousForcing	VelocityCorrectionScheme.h	/^            void SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SolveUnsteadyStokesSystem	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SolveUnsteadyStokesSystem	BackUp/VelocityCorrectionScheme.h	/^            void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
Nektar::VelocityCorrectionScheme::SolveUnsteadyStokesSystem	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::VelocityCorrectionScheme::SolveUnsteadyStokesSystem	VelocityCorrectionScheme.h	/^            void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
Nektar::VelocityCorrectionScheme::SubStepSetPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
Nektar::VelocityCorrectionScheme::SubStepSetPressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
Nektar::VelocityCorrectionScheme::SubStepSetPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
Nektar::VelocityCorrectionScheme::SubStepSetPressureBCs	VelocityCorrectionScheme.h	/^            void SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
Nektar::VelocityCorrectionScheme::VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.cpp	/^    VelocityCorrectionScheme::VelocityCorrectionScheme($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^            VelocityCorrectionScheme(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::VelocityCorrectionScheme	VelocityCorrectionScheme.cpp	/^    VelocityCorrectionScheme::VelocityCorrectionScheme($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^            VelocityCorrectionScheme(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::className	BackUp/VelocityCorrectionScheme.cpp	/^    string VelocityCorrectionScheme::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("VelocityCorrectionScheme", VelocityCorrectionScheme::create);$/;"	m	class:Nektar::VelocityCorrectionScheme	file:
Nektar::VelocityCorrectionScheme::className	BackUp/VelocityCorrectionScheme.h	/^            static std::string className;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:public
Nektar::VelocityCorrectionScheme::className	VelocityCorrectionScheme.cpp	/^    string VelocityCorrectionScheme::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("VelocityCorrectionScheme", VelocityCorrectionScheme::create);$/;"	m	class:Nektar::VelocityCorrectionScheme	file:
Nektar::VelocityCorrectionScheme::className	VelocityCorrectionScheme.h	/^            static std::string className;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:public
Nektar::VelocityCorrectionScheme::create	BackUp/VelocityCorrectionScheme.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::VelocityCorrectionScheme	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::create	VelocityCorrectionScheme.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::VelocityCorrectionScheme	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::VelocityCorrectionScheme::m_HBCdata	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, HBCInfo > m_HBCdata;  \/\/data structure to old all the information regarding High order pressure BCs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_HBCdata	VelocityCorrectionScheme.h	/^        Array<OneD, HBCInfo > m_HBCdata;  \/\/data structure to old all the information regarding High order pressure BCs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_UBCs	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_UBCs; \/\/< Storage for current and previous levels of second intermediate boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_UBCs	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_UBCs; \/\/< Storage for current and previous levels of second intermediate boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_UBCsMaxPts	BackUp/VelocityCorrectionScheme.h	/^        int m_UBCsMaxPts;                \/\/ Maximum points used in Modified scheme BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_UBCsMaxPts	VelocityCorrectionScheme.h	/^        int m_UBCsMaxPts;                \/\/ Maximum points used in Modified scheme BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_acceleration	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_acceleration;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_acceleration	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_acceleration;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_elmt	BackUp/VelocityCorrectionScheme.h	/^        StdRegions::StdExpansionSharedPtr m_elmt; \/\/ general standard element used to deaal with HOPBC calculations$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_elmt	VelocityCorrectionScheme.h	/^        StdRegions::StdExpansionSharedPtr m_elmt; \/\/ general standard element used to deaal with HOPBC calculations$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_negWavenumberSq	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_negWavenumberSq;      \/\/ minus Square of wavenumber$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_negWavenumberSq	VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_negWavenumberSq;      \/\/ minus Square of wavenumber$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCsMaxPts	BackUp/VelocityCorrectionScheme.h	/^        int m_pressureBCsMaxPts;                \/\/ Maximum points used in pressure BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCsMaxPts	VelocityCorrectionScheme.h	/^        int m_pressureBCsMaxPts;                \/\/ Maximum points used in pressure BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCtoElmtID	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoElmtID;  \/\/ Id of element to which pressure  boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCtoElmtID	VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoElmtID;  \/\/ Id of element to which pressure  boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCtoTraceID	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoTraceID; \/\/ Id of edge (2D) or face (3D) to which pressure boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureBCtoTraceID	VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoTraceID; \/\/ Id of edge (2D) or face (3D) to which pressure boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureCalls	BackUp/VelocityCorrectionScheme.h	/^        int m_pressureCalls;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureCalls	VelocityCorrectionScheme.h	/^        int m_pressureCalls;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureHBCs	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_pressureHBCs; \/\/< Storage for current and previous levels of high order pressure boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_pressureHBCs	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_pressureHBCs; \/\/< Storage for current and previous levels of high order pressure boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_showTimings	BackUp/VelocityCorrectionScheme.h	/^        bool m_showTimings;                     \/\/ Show timings for each step$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_showTimings	VelocityCorrectionScheme.h	/^        bool m_showTimings;                     \/\/ Show timings for each step$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_wavenumber	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_wavenumber;            \/\/ wave number 2 pi k \/Lz$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::m_wavenumber	VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_wavenumber;            \/\/ wave number 2 pi k \/Lz$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
Nektar::VelocityCorrectionScheme::v_DoInitialise	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoInitialise(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoInitialise	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoInitialise	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoInitialise(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoInitialise	VelocityCorrectionScheme.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoSolve	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoSolve(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoSolve	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoSolve	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoSolve(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_DoSolve	VelocityCorrectionScheme.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_GetForceDimension	BackUp/VelocityCorrectionScheme.cpp	/^    int VelocityCorrectionScheme::v_GetForceDimension()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_GetForceDimension	BackUp/VelocityCorrectionScheme.h	/^        virtual int v_GetForceDimension();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
Nektar::VelocityCorrectionScheme::v_GetForceDimension	VelocityCorrectionScheme.cpp	/^    int VelocityCorrectionScheme::v_GetForceDimension()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_GetForceDimension	VelocityCorrectionScheme.h	/^        virtual int v_GetForceDimension();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
Nektar::VelocityCorrectionScheme::v_GetSystemSingularChecks	BackUp/VelocityCorrectionScheme.cpp	/^    Array<OneD, bool> VelocityCorrectionScheme::v_GetSystemSingularChecks()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_GetSystemSingularChecks	BackUp/VelocityCorrectionScheme.h	/^        virtual Array<OneD, bool> v_GetSystemSingularChecks();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
Nektar::VelocityCorrectionScheme::v_GetSystemSingularChecks	VelocityCorrectionScheme.cpp	/^    Array<OneD, bool> VelocityCorrectionScheme::v_GetSystemSingularChecks()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_GetSystemSingularChecks	VelocityCorrectionScheme.h	/^        virtual Array<OneD, bool> v_GetSystemSingularChecks();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
Nektar::VelocityCorrectionScheme::v_InitObject	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_InitObject()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_InitObject	BackUp/VelocityCorrectionScheme.h	/^            virtual void v_InitObject();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
Nektar::VelocityCorrectionScheme::v_InitObject	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_InitObject()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
Nektar::VelocityCorrectionScheme::v_InitObject	VelocityCorrectionScheme.h	/^            virtual void v_InitObject();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
Nektar::VelocityCorrectionScheme::v_PrintSummary	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(std::ostream &out)
Nektar::VelocityCorrectionScheme::v_PrintSummary	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(std::ostream &out)
Nektar::VelocityCorrectionScheme::v_PrintSummary	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(std::ostream &out)
Nektar::VelocityCorrectionScheme::v_PrintSummary	VelocityCorrectionScheme.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(std::ostream &out)
Nektar::VelocityCorrectionScheme::v_TransCoeffToPhys	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransCoeffToPhys(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransCoeffToPhys	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransCoeffToPhys	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransCoeffToPhys(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransCoeffToPhys	VelocityCorrectionScheme.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransPhysToCoeff	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransPhysToCoeff(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransPhysToCoeff	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransPhysToCoeff	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransPhysToCoeff(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::v_TransPhysToCoeff	VelocityCorrectionScheme.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
Nektar::VelocityCorrectionScheme::~VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.cpp	/^        VelocityCorrectionScheme::~VelocityCorrectionScheme(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::~VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^            virtual ~VelocityCorrectionScheme();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
Nektar::VelocityCorrectionScheme::~VelocityCorrectionScheme	VelocityCorrectionScheme.cpp	/^        VelocityCorrectionScheme::~VelocityCorrectionScheme(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
Nektar::VelocityCorrectionScheme::~VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^            virtual ~VelocityCorrectionScheme();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
Nektar::VelocityCorrectionSchemeSharedPtr	BackUp/VelocityCorrectionScheme.h	/^    typedef boost::shared_ptr<VelocityCorrectionScheme> VelocityCorrectionSchemeSharedPtr;$/;"	t	namespace:Nektar
Nektar::VelocityCorrectionSchemeSharedPtr	VelocityCorrectionScheme.h	/^    typedef boost::shared_ptr<VelocityCorrectionScheme> VelocityCorrectionSchemeSharedPtr;$/;"	t	namespace:Nektar
Nektar::ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^    class ViscoElasticConstitutive: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
Nektar::ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^    class ViscoElasticConstitutive: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
Nektar::ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC	BackUp/ViscoElasticConstitutive.cpp	/^void  ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
Nektar::ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC	BackUp/ViscoElasticConstitutive.h	/^void AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
Nektar::ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC	ViscoElasticConstitutive.cpp	/^void  ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
Nektar::ViscoElasticConstitutive::AddStressTimesNormalToVelocityNeumannBC	ViscoElasticConstitutive.h	/^void AddStressTimesNormalToVelocityNeumannBC(const Array<OneD, const Array<OneD, NekDouble> > &stressin,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &stressin, Array<OneD, Array<OneD, NekDouble> > &Weakoutarray)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &fields, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &fields, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_Homo_FullExpTreatment_RHS(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	BackUp/ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart	ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	BackUp/ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray,  const NekDouble time)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak	ViscoElasticConstitutive.h	/^          void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_ExplicitPart_Weak(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	BackUp/ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarrayCoeffs, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	ViscoElasticConstitutive.cpp	/^     void ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB_ImpExpTreatment_Implicitpart(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarrayCoeffs, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment	BackUp/ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment	ViscoElasticConstitutive.h	/^         void EvaluateViscoElasticStress_OldroydB__Homo_FullExpTreatment(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing	BackUp/ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing	BackUp/ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing	ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing	ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak	BackUp/ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &F)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &F)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak	BackUp/ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak	ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &F)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &F)
Nektar::ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak	ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
Nektar::ViscoElasticConstitutive::ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.cpp	/^    ViscoElasticConstitutive::ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^	ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::ViscoElasticConstitutive	ViscoElasticConstitutive.cpp	/^    ViscoElasticConstitutive::ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^	ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::className	BackUp/ViscoElasticConstitutive.cpp	/^    string ViscoElasticConstitutive::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction(" ViscoElasticConstitutive", ViscoElasticConstitutive::create);$/;"	m	class:Nektar::ViscoElasticConstitutive	file:
Nektar::ViscoElasticConstitutive::className	BackUp/ViscoElasticConstitutive.h	/^        static std::string className;$/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
Nektar::ViscoElasticConstitutive::className	ViscoElasticConstitutive.cpp	/^    string ViscoElasticConstitutive::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction(" ViscoElasticConstitutive", ViscoElasticConstitutive::create);$/;"	m	class:Nektar::ViscoElasticConstitutive	file:
Nektar::ViscoElasticConstitutive::className	ViscoElasticConstitutive.h	/^        static std::string className;$/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
Nektar::ViscoElasticConstitutive::create	BackUp/ViscoElasticConstitutive.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::ViscoElasticConstitutive	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::create	ViscoElasticConstitutive.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::ViscoElasticConstitutive	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
Nektar::ViscoElasticConstitutive::m_viscoelastictreatmentType	BackUp/ViscoElasticConstitutive.h	/^      ViscoElasticTreatmentType m_viscoelastictreatmentType; \/\/ ViscoElasticTreatment $/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
Nektar::ViscoElasticConstitutive::m_viscoelastictreatmentType	ViscoElasticConstitutive.h	/^      ViscoElasticTreatmentType m_viscoelastictreatmentType; \/\/ ViscoElasticTreatment $/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
Nektar::ViscoElasticConstitutive::v_InitObject	BackUp/ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::v_InitObject()$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:()
Nektar::ViscoElasticConstitutive::v_InitObject	BackUp/ViscoElasticConstitutive.h	/^  void v_InitObject();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
Nektar::ViscoElasticConstitutive::v_InitObject	ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::v_InitObject()$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:()
Nektar::ViscoElasticConstitutive::v_InitObject	ViscoElasticConstitutive.h	/^  void v_InitObject();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
Nektar::ViscoElasticConstitutive::~ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.cpp	/^  ViscoElasticConstitutive::~ViscoElasticConstitutive(void)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(void)
Nektar::ViscoElasticConstitutive::~ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^        virtual ~ViscoElasticConstitutive();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
Nektar::ViscoElasticConstitutive::~ViscoElasticConstitutive	ViscoElasticConstitutive.cpp	/^  ViscoElasticConstitutive::~ViscoElasticConstitutive(void)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(void)
Nektar::ViscoElasticConstitutive::~ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^        virtual ~ViscoElasticConstitutive();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
Nektar::ViscoElasticTreatmentType	BackUp/ViscoElasticConstitutive.h	/^enum   ViscoElasticTreatmentType$/;"	g	namespace:Nektar
Nektar::ViscoElasticTreatmentType	ViscoElasticConstitutive.h	/^enum   ViscoElasticTreatmentType$/;"	g	namespace:Nektar
Nektar::ViscoElasticType	BackUp/IncNavierStokes.h	/^    enum ViscoElasticType$/;"	g	namespace:Nektar
Nektar::ViscoElasticType	IncNavierStokes.h	/^    enum ViscoElasticType$/;"	g	namespace:Nektar
Nektar::coupledSolverMatrices	BackUp/CoupledLinearNS.h	/^    typedef struct coupledSolverMatrices$/;"	s	namespace:Nektar
Nektar::coupledSolverMatrices	CoupledLinearNS.h	/^    typedef struct coupledSolverMatrices$/;"	s	namespace:Nektar
Nektar::coupledSolverMatrices::m_BCinv	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_BCinv;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_BCinv	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_BCinv;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_Btilde	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_Btilde;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_Btilde	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_Btilde;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_Cinv	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_Cinv; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_Cinv	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_Cinv; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_CoupledBndSys	BackUp/CoupledLinearNS.h	/^        MultiRegions::GlobalLinSysSharedPtr m_CoupledBndSys;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_CoupledBndSys	CoupledLinearNS.h	/^        MultiRegions::GlobalLinSysSharedPtr m_CoupledBndSys;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_D_bnd	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_bnd; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_D_bnd	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_bnd; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_D_int	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_int; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::coupledSolverMatrices::m_D_int	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_int; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
Nektar::eAdjoint	BackUp/IncNavierStokes.h	/^        eAdjoint,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eAdjoint	IncNavierStokes.h	/^        eAdjoint,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eAdvectionFormSize	BackUp/IncNavierStokes.h	/^        eAdvectionFormSize$/;"	e	enum:Nektar::AdvectionForm
Nektar::eAdvectionFormSize	IncNavierStokes.h	/^        eAdvectionFormSize$/;"	e	enum:Nektar::AdvectionForm
Nektar::eConvective	BackUp/IncNavierStokes.h	/^        eConvective,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eConvective	IncNavierStokes.h	/^        eConvective,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eEquationTypeSize	BackUp/IncNavierStokes.h	/^        eEquationTypeSize$/;"	e	enum:Nektar::EquationType
Nektar::eEquationTypeSize	IncNavierStokes.h	/^        eEquationTypeSize$/;"	e	enum:Nektar::EquationType
Nektar::eEquationViscoElasticTypeSize	BackUp/IncNavierStokes.h	/^        eEquationViscoElasticTypeSize,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eEquationViscoElasticTypeSize	IncNavierStokes.h	/^        eEquationViscoElasticTypeSize,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eFullExplicit	BackUp/ViscoElasticConstitutive.h	/^   eFullExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eFullExplicit	ViscoElasticConstitutive.h	/^   eFullExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eImplicitExplicit	BackUp/ViscoElasticConstitutive.h	/^   eImplicitExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eImplicitExplicit	ViscoElasticConstitutive.h	/^   eImplicitExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eLinearised	BackUp/IncNavierStokes.h	/^        eLinearised,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eLinearised	IncNavierStokes.h	/^        eLinearised,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNOViscoElasticTreatmentType	BackUp/ViscoElasticConstitutive.h	/^   eNOViscoElasticTreatmentType,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eNOViscoElasticTreatmentType	ViscoElasticConstitutive.h	/^   eNOViscoElasticTreatmentType,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eNoAdvection	BackUp/IncNavierStokes.h	/^		eNoAdvection,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNoAdvection	IncNavierStokes.h	/^		eNoAdvection,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNoAdvectionForm	BackUp/IncNavierStokes.h	/^        eNoAdvectionForm,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNoAdvectionForm	IncNavierStokes.h	/^        eNoAdvectionForm,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNoEquationType	BackUp/IncNavierStokes.h	/^        eNoEquationType,$/;"	e	enum:Nektar::EquationType
Nektar::eNoEquationType	IncNavierStokes.h	/^        eNoEquationType,$/;"	e	enum:Nektar::EquationType
Nektar::eNoViscoElasticType	BackUp/IncNavierStokes.h	/^      eNoViscoElasticType,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eNoViscoElasticType	IncNavierStokes.h	/^      eNoViscoElasticType,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eNonConservative	BackUp/IncNavierStokes.h	/^        eNonConservative,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eNonConservative	IncNavierStokes.h	/^        eNonConservative,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eOldroydB	BackUp/IncNavierStokes.h	/^      eOldroydB,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eOldroydB	IncNavierStokes.h	/^      eOldroydB,$/;"	e	enum:Nektar::ViscoElasticType
Nektar::eSkewSymmetric	BackUp/IncNavierStokes.h	/^        eSkewSymmetric,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eSkewSymmetric	IncNavierStokes.h	/^        eSkewSymmetric,$/;"	e	enum:Nektar::AdvectionForm
Nektar::eSteadyLinearisedNS	BackUp/IncNavierStokes.h	/^        eSteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyLinearisedNS	IncNavierStokes.h	/^        eSteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyNavierStokes	BackUp/IncNavierStokes.h	/^        eSteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyNavierStokes	IncNavierStokes.h	/^        eSteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyOseen	BackUp/IncNavierStokes.h	/^        eSteadyOseen,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyOseen	IncNavierStokes.h	/^        eSteadyOseen,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyStokes	BackUp/IncNavierStokes.h	/^        eSteadyStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eSteadyStokes	IncNavierStokes.h	/^        eSteadyStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyLinearisedNS	BackUp/IncNavierStokes.h	/^        eUnsteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyLinearisedNS	IncNavierStokes.h	/^        eUnsteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyNavierStokes	BackUp/IncNavierStokes.h	/^        eUnsteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyNavierStokes	IncNavierStokes.h	/^        eUnsteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyStokes	BackUp/IncNavierStokes.h	/^        eUnsteadyStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyStokes	IncNavierStokes.h	/^        eUnsteadyStokes,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyViscoElastic	BackUp/IncNavierStokes.h	/^	eUnsteadyViscoElastic,$/;"	e	enum:Nektar::EquationType
Nektar::eUnsteadyViscoElastic	IncNavierStokes.h	/^	eUnsteadyViscoElastic,$/;"	e	enum:Nektar::EquationType
Nektar::eViscoElasticTreatmentTypeSize	BackUp/ViscoElasticConstitutive.h	/^   eViscoElasticTreatmentTypeSize,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::eViscoElasticTreatmentTypeSize	ViscoElasticConstitutive.h	/^   eViscoElasticTreatmentTypeSize,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
Nektar::kAdvectionFormStr	BackUp/IncNavierStokes.h	/^    const std::string kAdvectionFormStr[] = $/;"	m	namespace:Nektar
Nektar::kAdvectionFormStr	IncNavierStokes.h	/^    const std::string kAdvectionFormStr[] = $/;"	m	namespace:Nektar
Nektar::kEquationTypeStr	BackUp/IncNavierStokes.h	/^    const std::string kEquationTypeStr[] = $/;"	m	namespace:Nektar
Nektar::kEquationTypeStr	IncNavierStokes.h	/^    const std::string kEquationTypeStr[] = $/;"	m	namespace:Nektar
Nektar::kEquationViscoElasticTypeStr	BackUp/IncNavierStokes.h	/^   const std::string kEquationViscoElasticTypeStr [] = $/;"	m	namespace:Nektar
Nektar::kEquationViscoElasticTypeStr	IncNavierStokes.h	/^   const std::string kEquationViscoElasticTypeStr [] = $/;"	m	namespace:Nektar
Nektar::kViscoElasticTreatmentTypeStr	BackUp/ViscoElasticConstitutive.h	/^   const std::string kViscoElasticTreatmentTypeStr [] = $/;"	m	namespace:Nektar
Nektar::kViscoElasticTreatmentTypeStr	ViscoElasticConstitutive.h	/^   const std::string kViscoElasticTreatmentTypeStr [] = $/;"	m	namespace:Nektar
Rotate	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::Rotate($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( Array<OneD, Array<OneD, NekDouble> > &input)
Rotate	BackUp/VelocityCorrectionScheme.h	/^        void Rotate(Array<OneD, Array<OneD, NekDouble> > &input);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(Array<OneD, Array<OneD, NekDouble> > &input)
Rotate	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::Rotate($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( Array<OneD, Array<OneD, NekDouble> > &input)
Rotate	VelocityCorrectionScheme.h	/^        void Rotate(Array<OneD, Array<OneD, NekDouble> > &input);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(Array<OneD, Array<OneD, NekDouble> > &input)
SetBoundaryConditions	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SetBoundaryConditions(NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble time)
SetBoundaryConditions	BackUp/IncNavierStokes.h	/^        void SetBoundaryConditions(NekDouble time);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(NekDouble time)
SetBoundaryConditions	IncNavierStokes.cpp	/^    void IncNavierStokes::SetBoundaryConditions(NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble time)
SetBoundaryConditions	IncNavierStokes.h	/^        void SetBoundaryConditions(NekDouble time);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(NekDouble time)
SetUpCoupledMatrix	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)
SetUpCoupledMatrix	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)
SetUpCoupledMatrix	BackUp/CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda = 0.0, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const NekDouble lambda = 0.0, const Array< OneD, Array<OneD, NekDouble> > &Advfield = NullNekDoubleArrayofArray, bool IsLinearNSEquation = true)
SetUpCoupledMatrix	BackUp/CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda, $/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(const NekDouble lambda, const Array< OneD, Array<OneD, NekDouble> > &Advfield, bool IsLinearNSEquation, const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag = NekConstants::kNekUnsetDouble)
SetUpCoupledMatrix	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation)
SetUpCoupledMatrix	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SetUpCoupledMatrix(const NekDouble lambda,  const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const NekDouble lambda, const Array< OneD, Array< OneD, NekDouble > > &Advfield, bool IsLinearNSEquation,const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag)
SetUpCoupledMatrix	CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda = 0.0, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const NekDouble lambda = 0.0, const Array< OneD, Array<OneD, NekDouble> > &Advfield = NullNekDoubleArrayofArray, bool IsLinearNSEquation = true)
SetUpCoupledMatrix	CoupledLinearNS.h	/^        void SetUpCoupledMatrix(const NekDouble lambda, $/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(const NekDouble lambda, const Array< OneD, Array<OneD, NekDouble> > &Advfield, bool IsLinearNSEquation, const int HomogeneousMode, CoupledSolverMatrices &mat, CoupledLocalToGlobalC0ContMapSharedPtr &locToGloMap, const NekDouble lambda_imag = NekConstants::kNekUnsetDouble)
SetUpPressureForcing	BackUp/VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpPressureForcing	BackUp/VelocityCorrectionScheme.h	/^            void SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpPressureForcing	VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpPressureForcing	VelocityCorrectionScheme.h	/^            void SetUpPressureForcing(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &fields, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpViscoElasticForcing	BackUp/ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscoElasticForcing	BackUp/ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscoElasticForcing	ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscoElasticForcing	ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscoElasticForcing_Weak	BackUp/ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &F)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &F)
SetUpViscoElasticForcing_Weak	BackUp/ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscoElasticForcing_Weak	ViscoElasticConstitutive.cpp	/^  void  ViscoElasticConstitutive::SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &F)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(Array<OneD, Array<OneD, NekDouble> > &F)
SetUpViscoElasticForcing_Weak	ViscoElasticConstitutive.h	/^	void SetUpViscoElasticForcing_Weak(Array<OneD, Array<OneD, NekDouble> > &Forcing);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &Forcing)
SetUpViscousForcing	BackUp/VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpViscousForcing	BackUp/VelocityCorrectionScheme.h	/^            void SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpViscousForcing	VelocityCorrectionScheme.cpp	/^    void   VelocityCorrectionScheme::SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
SetUpViscousForcing	VelocityCorrectionScheme.h	/^            void SetUpViscousForcing(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &Forcing, const NekDouble aii_Dt)
Solve	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::Solve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Solve	BackUp/CoupledLinearNS.h	/^        void Solve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
Solve	CoupledLinearNS.cpp	/^    void CoupledLinearNS::Solve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
Solve	CoupledLinearNS.h	/^        void Solve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
SolveLinearNS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
SolveLinearNS	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,  Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure,  const int mode)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int mode)
SolveLinearNS	BackUp/CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
SolveLinearNS	BackUp/CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int HomogeneousMode = 0)
SolveLinearNS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
SolveLinearNS	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,  Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure,  const int mode)$/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int mode)
SolveLinearNS	CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing)
SolveLinearNS	CoupledLinearNS.h	/^        void SolveLinearNS(const Array<OneD, Array<OneD, NekDouble> > &forcing,$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, Array<OneD, NekDouble> > &forcing, Array<OneD, MultiRegions::ExpListSharedPtr> &fields, MultiRegions::ExpListSharedPtr &pressure, const int HomogeneousMode = 0)
SolveSteadyNavierStokes	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveSteadyNavierStokes(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
SolveSteadyNavierStokes	BackUp/CoupledLinearNS.h	/^        void SolveSteadyNavierStokes(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
SolveSteadyNavierStokes	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveSteadyNavierStokes(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
SolveSteadyNavierStokes	CoupledLinearNS.h	/^        void SolveSteadyNavierStokes(void);$/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(void)
SolveUnsteadyStokesSystem	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
SolveUnsteadyStokesSystem	BackUp/CoupledLinearNS.h	/^        void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
SolveUnsteadyStokesSystem	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
SolveUnsteadyStokesSystem	BackUp/VelocityCorrectionScheme.h	/^            void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
SolveUnsteadyStokesSystem	CoupledLinearNS.cpp	/^    void CoupledLinearNS::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::CoupledLinearNS	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
SolveUnsteadyStokesSystem	CoupledLinearNS.h	/^        void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::CoupledLinearNS	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
SolveUnsteadyStokesSystem	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble aii_Dt)
SolveUnsteadyStokesSystem	VelocityCorrectionScheme.h	/^            void SolveUnsteadyStokesSystem(const Array<OneD, const Array<OneD, NekDouble> > &inarray, $/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time, const NekDouble a_iixDt)
StifflyStable_Alpha_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Alpha_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
StifflyStable_Alpha_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Alpha_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
StifflyStable_Betaq_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Betaq_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
StifflyStable_Betaq_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Betaq_Coeffs[][3] = {{ 1.0,  0.0, 0.0},$/;"	m	namespace:Nektar
StifflyStable_Gamma0_Coeffs	BackUp/VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Gamma0_Coeffs[3]  = {1.0,  1.5, 11.0\/6.0};$/;"	m	namespace:Nektar
StifflyStable_Gamma0_Coeffs	VelocityCorrectionScheme.h	/^    static NekDouble StifflyStable_Gamma0_Coeffs[3]  = {1.0,  1.5, 11.0\/6.0};$/;"	m	namespace:Nektar
SubStepAdvance	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvance(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
SubStepAdvance	BackUp/IncNavierStokes.h	/^        void SubStepAdvance   (const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
SubStepAdvance	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvance(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
SubStepAdvance	IncNavierStokes.h	/^        void SubStepAdvance   (const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
SubStepAdvection	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvection($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepAdvection	BackUp/IncNavierStokes.h	/^        void SubStepAdvection (const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepAdvection	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepAdvection($/;"	f	class:Nektar::IncNavierStokes	signature:( const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepAdvection	IncNavierStokes.h	/^        void SubStepAdvection (const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepExtrapoloteField	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
SubStepExtrapoloteField	BackUp/IncNavierStokes.h	/^        void SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel);$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
SubStepExtrapoloteField	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)$/;"	f	class:Nektar::IncNavierStokes	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
SubStepExtrapoloteField	IncNavierStokes.h	/^        void SubStepExtrapoloteField(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel);$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(NekDouble toff, Array< OneD, Array<OneD, NekDouble> > &ExtVel)
SubStepProjection	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,  Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepProjection	BackUp/IncNavierStokes.h	/^        void SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepProjection	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,  Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)$/;"	f	class:Nektar::IncNavierStokes	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepProjection	IncNavierStokes.h	/^        void SubStepProjection(const Array<OneD, const Array<OneD, NekDouble> > &inarray,$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, Array<OneD, Array<OneD, NekDouble> > &outarray, const NekDouble time)
SubStepSaveFields	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepSaveFields(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
SubStepSaveFields	BackUp/IncNavierStokes.h	/^        void SubStepSaveFields(const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
SubStepSaveFields	IncNavierStokes.cpp	/^    void IncNavierStokes::SubStepSaveFields(const int nstep)$/;"	f	class:Nektar::IncNavierStokes	signature:(const int nstep)
SubStepSaveFields	IncNavierStokes.h	/^        void SubStepSaveFields(const int nstep);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(const int nstep)
SubStepSetPressureBCs	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
SubStepSetPressureBCs	BackUp/VelocityCorrectionScheme.h	/^            void SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
SubStepSetPressureBCs	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
SubStepSetPressureBCs	VelocityCorrectionScheme.h	/^            void SubStepSetPressureBCs(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const Array<OneD, const Array<OneD, NekDouble> > &inarray, const NekDouble Aii_DT)
VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.cpp	/^    VelocityCorrectionScheme::VelocityCorrectionScheme($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^            VelocityCorrectionScheme(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^    class VelocityCorrectionScheme: public  ViscoElasticConstitutive$/;"	c	namespace:Nektar	inherits:ViscoElasticConstitutive
VelocityCorrectionScheme	VelocityCorrectionScheme.cpp	/^    VelocityCorrectionScheme::VelocityCorrectionScheme($/;"	f	class:Nektar::VelocityCorrectionScheme	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^            VelocityCorrectionScheme(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^    class VelocityCorrectionScheme: public  ViscoElasticConstitutive$/;"	c	namespace:Nektar	inherits:ViscoElasticConstitutive
VelocityCorrectionSchemeSharedPtr	BackUp/VelocityCorrectionScheme.h	/^    typedef boost::shared_ptr<VelocityCorrectionScheme> VelocityCorrectionSchemeSharedPtr;$/;"	t	namespace:Nektar
VelocityCorrectionSchemeSharedPtr	VelocityCorrectionScheme.h	/^    typedef boost::shared_ptr<VelocityCorrectionScheme> VelocityCorrectionSchemeSharedPtr;$/;"	t	namespace:Nektar
ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.cpp	/^    ViscoElasticConstitutive::ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^	ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^    class ViscoElasticConstitutive: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
ViscoElasticConstitutive	ViscoElasticConstitutive.cpp	/^    ViscoElasticConstitutive::ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession):$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^	ViscoElasticConstitutive(const LibUtilities::SessionReaderSharedPtr& pSession);$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:(const LibUtilities::SessionReaderSharedPtr& pSession)
ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^    class ViscoElasticConstitutive: public IncNavierStokes$/;"	c	namespace:Nektar	inherits:IncNavierStokes
ViscoElasticTreatmentType	BackUp/ViscoElasticConstitutive.h	/^enum   ViscoElasticTreatmentType$/;"	g	namespace:Nektar
ViscoElasticTreatmentType	ViscoElasticConstitutive.h	/^enum   ViscoElasticTreatmentType$/;"	g	namespace:Nektar
ViscoElasticType	BackUp/IncNavierStokes.h	/^    enum ViscoElasticType$/;"	g	namespace:Nektar
ViscoElasticType	IncNavierStokes.h	/^    enum ViscoElasticType$/;"	g	namespace:Nektar
WriteModalEnergy	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::WriteModalEnergy(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
WriteModalEnergy	BackUp/IncNavierStokes.h	/^        void WriteModalEnergy(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
WriteModalEnergy	IncNavierStokes.cpp	/^    void IncNavierStokes::WriteModalEnergy(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
WriteModalEnergy	IncNavierStokes.h	/^        void WriteModalEnergy(void);$/;"	p	class:Nektar::IncNavierStokes	access:protected	signature:(void)
className	BackUp/CoupledLinearNS.cpp	/^    string CoupledLinearNS::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("CoupledLinearisedNS", CoupledLinearNS::create);$/;"	m	class:Nektar::CoupledLinearNS	file:
className	BackUp/CoupledLinearNS.h	/^        static std::string className;        $/;"	m	class:Nektar::CoupledLinearNS	access:public
className	BackUp/VelocityCorrectionScheme.cpp	/^    string VelocityCorrectionScheme::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("VelocityCorrectionScheme", VelocityCorrectionScheme::create);$/;"	m	class:Nektar::VelocityCorrectionScheme	file:
className	BackUp/VelocityCorrectionScheme.h	/^            static std::string className;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:public
className	BackUp/ViscoElasticConstitutive.cpp	/^    string ViscoElasticConstitutive::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction(" ViscoElasticConstitutive", ViscoElasticConstitutive::create);$/;"	m	class:Nektar::ViscoElasticConstitutive	file:
className	BackUp/ViscoElasticConstitutive.h	/^        static std::string className;$/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
className	CoupledLinearNS.cpp	/^    string CoupledLinearNS::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("CoupledLinearisedNS", CoupledLinearNS::create);$/;"	m	class:Nektar::CoupledLinearNS	file:
className	CoupledLinearNS.h	/^        static std::string className;        $/;"	m	class:Nektar::CoupledLinearNS	access:public
className	VelocityCorrectionScheme.cpp	/^    string VelocityCorrectionScheme::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction("VelocityCorrectionScheme", VelocityCorrectionScheme::create);$/;"	m	class:Nektar::VelocityCorrectionScheme	file:
className	VelocityCorrectionScheme.h	/^            static std::string className;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:public
className	ViscoElasticConstitutive.cpp	/^    string ViscoElasticConstitutive::className = SolverUtils::GetEquationSystemFactory().RegisterCreatorFunction(" ViscoElasticConstitutive", ViscoElasticConstitutive::create);$/;"	m	class:Nektar::ViscoElasticConstitutive	file:
className	ViscoElasticConstitutive.h	/^        static std::string className;$/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
coupledSolverMatrices	BackUp/CoupledLinearNS.h	/^    typedef struct coupledSolverMatrices$/;"	s	namespace:Nektar
coupledSolverMatrices	CoupledLinearNS.h	/^    typedef struct coupledSolverMatrices$/;"	s	namespace:Nektar
create	BackUp/CoupledLinearNS.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::CoupledLinearNS	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
create	BackUp/VelocityCorrectionScheme.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::VelocityCorrectionScheme	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
create	BackUp/ViscoElasticConstitutive.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::ViscoElasticConstitutive	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
create	CoupledLinearNS.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::CoupledLinearNS	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
create	VelocityCorrectionScheme.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::VelocityCorrectionScheme	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
create	ViscoElasticConstitutive.h	/^        static SolverUtils::EquationSystemSharedPtr create($/;"	f	class:Nektar::ViscoElasticConstitutive	access:public	signature:( const LibUtilities::SessionReaderSharedPtr& pSession)
eAdjoint	BackUp/IncNavierStokes.h	/^        eAdjoint,$/;"	e	enum:Nektar::AdvectionForm
eAdjoint	IncNavierStokes.h	/^        eAdjoint,$/;"	e	enum:Nektar::AdvectionForm
eAdvectionFormSize	BackUp/IncNavierStokes.h	/^        eAdvectionFormSize$/;"	e	enum:Nektar::AdvectionForm
eAdvectionFormSize	IncNavierStokes.h	/^        eAdvectionFormSize$/;"	e	enum:Nektar::AdvectionForm
eConvective	BackUp/IncNavierStokes.h	/^        eConvective,$/;"	e	enum:Nektar::AdvectionForm
eConvective	IncNavierStokes.h	/^        eConvective,$/;"	e	enum:Nektar::AdvectionForm
eEquationTypeSize	BackUp/IncNavierStokes.h	/^        eEquationTypeSize$/;"	e	enum:Nektar::EquationType
eEquationTypeSize	IncNavierStokes.h	/^        eEquationTypeSize$/;"	e	enum:Nektar::EquationType
eEquationViscoElasticTypeSize	BackUp/IncNavierStokes.h	/^        eEquationViscoElasticTypeSize,$/;"	e	enum:Nektar::ViscoElasticType
eEquationViscoElasticTypeSize	IncNavierStokes.h	/^        eEquationViscoElasticTypeSize,$/;"	e	enum:Nektar::ViscoElasticType
eFullExplicit	BackUp/ViscoElasticConstitutive.h	/^   eFullExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eFullExplicit	ViscoElasticConstitutive.h	/^   eFullExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eImplicitExplicit	BackUp/ViscoElasticConstitutive.h	/^   eImplicitExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eImplicitExplicit	ViscoElasticConstitutive.h	/^   eImplicitExplicit,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eLinearised	BackUp/IncNavierStokes.h	/^        eLinearised,$/;"	e	enum:Nektar::AdvectionForm
eLinearised	IncNavierStokes.h	/^        eLinearised,$/;"	e	enum:Nektar::AdvectionForm
eNOViscoElasticTreatmentType	BackUp/ViscoElasticConstitutive.h	/^   eNOViscoElasticTreatmentType,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eNOViscoElasticTreatmentType	ViscoElasticConstitutive.h	/^   eNOViscoElasticTreatmentType,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eNoAdvection	BackUp/IncNavierStokes.h	/^		eNoAdvection,$/;"	e	enum:Nektar::AdvectionForm
eNoAdvection	IncNavierStokes.h	/^		eNoAdvection,$/;"	e	enum:Nektar::AdvectionForm
eNoAdvectionForm	BackUp/IncNavierStokes.h	/^        eNoAdvectionForm,$/;"	e	enum:Nektar::AdvectionForm
eNoAdvectionForm	IncNavierStokes.h	/^        eNoAdvectionForm,$/;"	e	enum:Nektar::AdvectionForm
eNoEquationType	BackUp/IncNavierStokes.h	/^        eNoEquationType,$/;"	e	enum:Nektar::EquationType
eNoEquationType	IncNavierStokes.h	/^        eNoEquationType,$/;"	e	enum:Nektar::EquationType
eNoViscoElasticType	BackUp/IncNavierStokes.h	/^      eNoViscoElasticType,$/;"	e	enum:Nektar::ViscoElasticType
eNoViscoElasticType	IncNavierStokes.h	/^      eNoViscoElasticType,$/;"	e	enum:Nektar::ViscoElasticType
eNonConservative	BackUp/IncNavierStokes.h	/^        eNonConservative,$/;"	e	enum:Nektar::AdvectionForm
eNonConservative	IncNavierStokes.h	/^        eNonConservative,$/;"	e	enum:Nektar::AdvectionForm
eOldroydB	BackUp/IncNavierStokes.h	/^      eOldroydB,$/;"	e	enum:Nektar::ViscoElasticType
eOldroydB	IncNavierStokes.h	/^      eOldroydB,$/;"	e	enum:Nektar::ViscoElasticType
eSkewSymmetric	BackUp/IncNavierStokes.h	/^        eSkewSymmetric,$/;"	e	enum:Nektar::AdvectionForm
eSkewSymmetric	IncNavierStokes.h	/^        eSkewSymmetric,$/;"	e	enum:Nektar::AdvectionForm
eSteadyLinearisedNS	BackUp/IncNavierStokes.h	/^        eSteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
eSteadyLinearisedNS	IncNavierStokes.h	/^        eSteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
eSteadyNavierStokes	BackUp/IncNavierStokes.h	/^        eSteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
eSteadyNavierStokes	IncNavierStokes.h	/^        eSteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
eSteadyOseen	BackUp/IncNavierStokes.h	/^        eSteadyOseen,$/;"	e	enum:Nektar::EquationType
eSteadyOseen	IncNavierStokes.h	/^        eSteadyOseen,$/;"	e	enum:Nektar::EquationType
eSteadyStokes	BackUp/IncNavierStokes.h	/^        eSteadyStokes,$/;"	e	enum:Nektar::EquationType
eSteadyStokes	IncNavierStokes.h	/^        eSteadyStokes,$/;"	e	enum:Nektar::EquationType
eUnsteadyLinearisedNS	BackUp/IncNavierStokes.h	/^        eUnsteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
eUnsteadyLinearisedNS	IncNavierStokes.h	/^        eUnsteadyLinearisedNS,$/;"	e	enum:Nektar::EquationType
eUnsteadyNavierStokes	BackUp/IncNavierStokes.h	/^        eUnsteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
eUnsteadyNavierStokes	IncNavierStokes.h	/^        eUnsteadyNavierStokes,$/;"	e	enum:Nektar::EquationType
eUnsteadyStokes	BackUp/IncNavierStokes.h	/^        eUnsteadyStokes,$/;"	e	enum:Nektar::EquationType
eUnsteadyStokes	IncNavierStokes.h	/^        eUnsteadyStokes,$/;"	e	enum:Nektar::EquationType
eUnsteadyViscoElastic	BackUp/IncNavierStokes.h	/^	eUnsteadyViscoElastic,$/;"	e	enum:Nektar::EquationType
eUnsteadyViscoElastic	IncNavierStokes.h	/^	eUnsteadyViscoElastic,$/;"	e	enum:Nektar::EquationType
eViscoElasticTreatmentTypeSize	BackUp/ViscoElasticConstitutive.h	/^   eViscoElasticTreatmentTypeSize,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
eViscoElasticTreatmentTypeSize	ViscoElasticConstitutive.h	/^   eViscoElasticTreatmentTypeSize,$/;"	e	enum:Nektar::ViscoElasticTreatmentType
kAdvectionFormStr	BackUp/IncNavierStokes.h	/^    const std::string kAdvectionFormStr[] = $/;"	m	namespace:Nektar
kAdvectionFormStr	IncNavierStokes.h	/^    const std::string kAdvectionFormStr[] = $/;"	m	namespace:Nektar
kEquationTypeStr	BackUp/IncNavierStokes.h	/^    const std::string kEquationTypeStr[] = $/;"	m	namespace:Nektar
kEquationTypeStr	IncNavierStokes.h	/^    const std::string kEquationTypeStr[] = $/;"	m	namespace:Nektar
kEquationViscoElasticTypeStr	BackUp/IncNavierStokes.h	/^   const std::string kEquationViscoElasticTypeStr [] = $/;"	m	namespace:Nektar
kEquationViscoElasticTypeStr	IncNavierStokes.h	/^   const std::string kEquationViscoElasticTypeStr [] = $/;"	m	namespace:Nektar
kViscoElasticTreatmentTypeStr	BackUp/ViscoElasticConstitutive.h	/^   const std::string kViscoElasticTreatmentTypeStr [] = $/;"	m	namespace:Nektar
kViscoElasticTreatmentTypeStr	ViscoElasticConstitutive.h	/^   const std::string kViscoElasticTreatmentTypeStr [] = $/;"	m	namespace:Nektar
m_BCinv	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_BCinv;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_BCinv	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_BCinv;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_Btilde	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_Btilde;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_Btilde	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr m_Btilde;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_Cinv	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_Cinv; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_Cinv	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_Cinv; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_CoeffState	BackUp/IncNavierStokes.h	/^        MultiRegions::CoeffState m_CoeffState;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_CoeffState	IncNavierStokes.h	/^        MultiRegions::CoeffState m_CoeffState;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_CoupledBndSys	BackUp/CoupledLinearNS.h	/^        MultiRegions::GlobalLinSysSharedPtr m_CoupledBndSys;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_CoupledBndSys	CoupledLinearNS.h	/^        MultiRegions::GlobalLinSysSharedPtr m_CoupledBndSys;$/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_D_bnd	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_bnd; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_D_bnd	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_bnd; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_D_int	BackUp/CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_int; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_D_int	CoupledLinearNS.h	/^        DNekScalBlkMatSharedPtr  m_D_int; $/;"	m	struct:Nektar::coupledSolverMatrices	access:public
m_ForcingTerm	BackUp/CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_ForcingTerm	CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_ForcingTerm_Coeffs	BackUp/CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm_Coeffs;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_ForcingTerm_Coeffs	CoupledLinearNS.h	/^        Array<OneD, Array<OneD, NekDouble> > m_ForcingTerm_Coeffs;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_HBCdata	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, HBCInfo > m_HBCdata;  \/\/data structure to old all the information regarding High order pressure BCs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_HBCdata	VelocityCorrectionScheme.h	/^        Array<OneD, HBCInfo > m_HBCdata;  \/\/data structure to old all the information regarding High order pressure BCs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_KinvisPercentage	BackUp/CoupledLinearNS.h	/^        NekDouble m_KinvisPercentage;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_KinvisPercentage	CoupledLinearNS.h	/^        NekDouble m_KinvisPercentage;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_L	BackUp/IncNavierStokes.h	/^	NekDouble     m_L;        \/\/ length scale$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_L	IncNavierStokes.h	/^	NekDouble     m_L;        \/\/ length scale$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_MatrixSetUpStep	BackUp/CoupledLinearNS.h	/^        int m_MatrixSetUpStep; $/;"	m	class:Nektar::CoupledLinearNS	access:private
m_MatrixSetUpStep	CoupledLinearNS.h	/^        int m_MatrixSetUpStep; $/;"	m	class:Nektar::CoupledLinearNS	access:private
m_Mup	BackUp/IncNavierStokes.h	/^	NekDouble     m_Mup;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Mup	IncNavierStokes.h	/^	NekDouble     m_Mup;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Mus	BackUp/IncNavierStokes.h	/^	NekDouble     m_Mus;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Mus	IncNavierStokes.h	/^	NekDouble     m_Mus;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Re	BackUp/IncNavierStokes.h	/^        NekDouble     m_Re;        \/\/\/< Reynolds number$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Re	IncNavierStokes.h	/^        NekDouble     m_Re;        \/\/\/< Reynolds number$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReC	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReC;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReC	IncNavierStokes.h	/^        NekDouble     m_ReC;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM1	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM1;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM1	IncNavierStokes.h	/^        NekDouble     m_ReM1;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM2	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM2;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM2	IncNavierStokes.h	/^        NekDouble     m_ReM2;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM3	BackUp/IncNavierStokes.h	/^        NekDouble     m_ReM3;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM3	IncNavierStokes.h	/^        NekDouble     m_ReM3;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM4	BackUp/IncNavierStokes.h	/^	NekDouble     m_ReM4;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ReM4	IncNavierStokes.h	/^	NekDouble     m_ReM4;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Rep	BackUp/IncNavierStokes.h	/^	NekDouble     m_Rep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Rep	IncNavierStokes.h	/^	NekDouble     m_Rep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Restart	BackUp/CoupledLinearNS.h	/^        int m_Restart;    \/\/ 0=Stokes solution as init guess; 1=Restart.cont as init guess$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_Restart	CoupledLinearNS.h	/^        int m_Restart;    \/\/ 0=Stokes solution as init guess; 1=Restart.cont as init guess$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_Rmu	BackUp/IncNavierStokes.h	/^        NekDouble     m_Rmu;           \/\/\/< Ratio of Solvent Viscosity to total Viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Rmu	IncNavierStokes.h	/^        NekDouble     m_Rmu;           \/\/\/< Ratio of Solvent Viscosity to total Viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Ro	BackUp/IncNavierStokes.h	/^	NekDouble     m_Ro;       \/\/density $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_Ro	IncNavierStokes.h	/^	NekDouble     m_Ro;       \/\/density $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_SmoothAdvection	BackUp/IncNavierStokes.h	/^        bool m_SmoothAdvection; \/\/ bool to identify if advection term smoothing is requested $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_SmoothAdvection	IncNavierStokes.h	/^        bool m_SmoothAdvection; \/\/ bool to identify if advection term smoothing is requested $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_U	BackUp/IncNavierStokes.h	/^	NekDouble     m_U;         \/\/ mean velocity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_U	IncNavierStokes.h	/^	NekDouble     m_U;         \/\/ mean velocity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_UBCs	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_UBCs; \/\/< Storage for current and previous levels of second intermediate boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_UBCs	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_UBCs; \/\/< Storage for current and previous levels of second intermediate boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_UBCsMaxPts	BackUp/VelocityCorrectionScheme.h	/^        int m_UBCsMaxPts;                \/\/ Maximum points used in Modified scheme BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_UBCsMaxPts	VelocityCorrectionScheme.h	/^        int m_UBCsMaxPts;                \/\/ Maximum points used in Modified scheme BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_We	BackUp/IncNavierStokes.h	/^        NekDouble     m_We;            \/\/\/< Weissenberg Number$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_We	IncNavierStokes.h	/^        NekDouble     m_We;            \/\/\/< Weissenberg Number$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_acceleration	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_acceleration;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_acceleration	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_acceleration;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_advObject	BackUp/IncNavierStokes.h	/^        AdvectionTermSharedPtr m_advObject;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_advObject	IncNavierStokes.h	/^        AdvectionTermSharedPtr m_advObject;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_assPhysOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_assPhysOffset; \/\/ associated elments physical offset (k and k_c are the real and the complex plane)$/;"	m	struct:Nektar::HBCInfo	access:public
m_assPhysOffset	VelocityCorrectionScheme.h	/^        int m_assPhysOffset; \/\/ associated elments physical offset (k and k_c are the real and the complex plane)$/;"	m	struct:Nektar::HBCInfo	access:public
m_bndElmtOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_bndElmtOffset; \/\/ element offset in the boundary expansion$/;"	m	struct:Nektar::HBCInfo	access:public
m_bndElmtOffset	VelocityCorrectionScheme.h	/^        int m_bndElmtOffset; \/\/ element offset in the boundary expansion$/;"	m	struct:Nektar::HBCInfo	access:public
m_bndryElmtID	BackUp/VelocityCorrectionScheme.h	/^        int m_bndryElmtID;   \/\/ pressure boundary condition ID$/;"	m	struct:Nektar::HBCInfo	access:public
m_bndryElmtID	VelocityCorrectionScheme.h	/^        int m_bndryElmtID;   \/\/ pressure boundary condition ID$/;"	m	struct:Nektar::HBCInfo	access:public
m_coeffOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_coeffOffset;   \/\/ coefficients offset used to locate the acceleration term in the general m_pressureHBC$/;"	m	struct:Nektar::HBCInfo	access:public
m_coeffOffset	VelocityCorrectionScheme.h	/^        int m_coeffOffset;   \/\/ coefficients offset used to locate the acceleration term in the general m_pressureHBC$/;"	m	struct:Nektar::HBCInfo	access:public
m_counter	BackUp/CoupledLinearNS.h	/^        int m_counter;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_counter	CoupledLinearNS.h	/^        int m_counter;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_elmt	BackUp/VelocityCorrectionScheme.h	/^        StdRegions::StdExpansionSharedPtr m_elmt; \/\/ general standard element used to deaal with HOPBC calculations$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_elmt	VelocityCorrectionScheme.h	/^        StdRegions::StdExpansionSharedPtr m_elmt; \/\/ general standard element used to deaal with HOPBC calculations$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_elmtTraceID	BackUp/VelocityCorrectionScheme.h	/^        int m_elmtTraceID;   \/\/ trace ID on the element$/;"	m	struct:Nektar::HBCInfo	access:public
m_elmtTraceID	VelocityCorrectionScheme.h	/^        int m_elmtTraceID;   \/\/ trace ID on the element$/;"	m	struct:Nektar::HBCInfo	access:public
m_energysteps	BackUp/IncNavierStokes.h	/^        int         m_energysteps;   \/\/\/< dump energy to file at steps time$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_energysteps	IncNavierStokes.h	/^        int         m_energysteps;   \/\/\/< dump energy to file at steps time$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_equationType	BackUp/IncNavierStokes.h	/^        EquationType  m_equationType;  \/\/\/< equation type;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_equationType	IncNavierStokes.h	/^        EquationType  m_equationType;  \/\/\/< equation type;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_globalElmtID	BackUp/VelocityCorrectionScheme.h	/^        int m_globalElmtID;  \/\/ elements ID in the global ordering$/;"	m	struct:Nektar::HBCInfo	access:public
m_globalElmtID	VelocityCorrectionScheme.h	/^        int m_globalElmtID;  \/\/ elements ID in the global ordering$/;"	m	struct:Nektar::HBCInfo	access:public
m_initialStep	BackUp/CoupledLinearNS.h	/^        bool m_initialStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_initialStep	CoupledLinearNS.h	/^        bool m_initialStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_intSteps	BackUp/IncNavierStokes.h	/^        int m_intSteps;  \/\/\/< Number of time integration steps AND  Order of extrapolation for pressure boundary conditions.         $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_intSteps	IncNavierStokes.h	/^        int m_intSteps;  \/\/\/< Number of time integration steps AND  Order of extrapolation for pressure boundary conditions.         $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_integrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_integrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps_aggregatesize	BackUp/IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps_aggregatesize	IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps_viscoelasticstress	BackUp/IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationOps_viscoelasticstress	IncNavierStokes.h	/^	LibUtilities::TimeIntegrationSchemeOperators m_integrationOps_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationScheme	BackUp/IncNavierStokes.h	/^        Array<OneD, LibUtilities::TimeIntegrationSchemeSharedPtr> m_integrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationScheme	IncNavierStokes.h	/^        Array<OneD, LibUtilities::TimeIntegrationSchemeSharedPtr> m_integrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln_aggregatesize	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln_aggregatesize	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_aggregatesize;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln_viscoelasticstress	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_integrationSoln_viscoelasticstress	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSolutionSharedPtr  m_integrationSoln_viscoelasticstress;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_kinvis	BackUp/IncNavierStokes.h	/^        NekDouble   m_kinvis;        \/\/\/< Kinematic viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_kinvis	IncNavierStokes.h	/^        NekDouble   m_kinvis;        \/\/\/< Kinematic viscosity$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_kinvisMin	BackUp/CoupledLinearNS.h	/^        NekDouble m_kinvisMin;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_kinvisMin	CoupledLinearNS.h	/^        NekDouble m_kinvisMin;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_kinvisStep	BackUp/CoupledLinearNS.h	/^        NekDouble m_kinvisStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_kinvisStep	CoupledLinearNS.h	/^        NekDouble m_kinvisStep;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_locToGloMap	BackUp/CoupledLinearNS.h	/^        Array<OneD, CoupledLocalToGlobalC0ContMapSharedPtr> m_locToGloMap;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_locToGloMap	CoupledLinearNS.h	/^        Array<OneD, CoupledLocalToGlobalC0ContMapSharedPtr> m_locToGloMap;$/;"	m	class:Nektar::CoupledLinearNS	access:public
m_mat	BackUp/CoupledLinearNS.h	/^        Array<OneD, CoupledSolverMatrices> m_mat;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_mat	CoupledLinearNS.h	/^        Array<OneD, CoupledSolverMatrices> m_mat;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_maxIt	BackUp/CoupledLinearNS.h	/^        int m_maxIt;           \/\/ Max number of iteration$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_maxIt	CoupledLinearNS.h	/^        int m_maxIt;           \/\/ Max number of iteration$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_mdlFile	BackUp/IncNavierStokes.h	/^        std::ofstream m_mdlFile;  \/\/ modal energy file $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_mdlFile	IncNavierStokes.h	/^        std::ofstream m_mdlFile;  \/\/ modal energy file $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_nConvectiveFields	BackUp/IncNavierStokes.h	/^        int   m_nConvectiveFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_nConvectiveFields	IncNavierStokes.h	/^        int   m_nConvectiveFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_nViscoElasticStressFields	BackUp/IncNavierStokes.h	/^	int m_nViscoElasticStressFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_nViscoElasticStressFields	IncNavierStokes.h	/^	int m_nViscoElasticStressFields;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_negWavenumberSq	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_negWavenumberSq;      \/\/ minus Square of wavenumber$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_negWavenumberSq	VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_negWavenumberSq;      \/\/ minus Square of wavenumber$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_numstep	BackUp/IncNavierStokes.h	/^	int m_numstep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_numstep	IncNavierStokes.h	/^	int m_numstep;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_physOffset	BackUp/VelocityCorrectionScheme.h	/^        int m_physOffset;    \/\/ elmenent physical offset in the global list$/;"	m	struct:Nektar::HBCInfo	access:public
m_physOffset	VelocityCorrectionScheme.h	/^        int m_physOffset;    \/\/ elmenent physical offset in the global list$/;"	m	struct:Nektar::HBCInfo	access:public
m_pressure	BackUp/IncNavierStokes.h	/^        MultiRegions::ExpListSharedPtr m_pressure;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_pressure	IncNavierStokes.h	/^        MultiRegions::ExpListSharedPtr m_pressure;  $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_pressureBCsMaxPts	BackUp/VelocityCorrectionScheme.h	/^        int m_pressureBCsMaxPts;                \/\/ Maximum points used in pressure BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureBCsMaxPts	VelocityCorrectionScheme.h	/^        int m_pressureBCsMaxPts;                \/\/ Maximum points used in pressure BC evaluation $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureBCtoElmtID	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoElmtID;  \/\/ Id of element to which pressure  boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureBCtoElmtID	VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoElmtID;  \/\/ Id of element to which pressure  boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureBCtoTraceID	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoTraceID; \/\/ Id of edge (2D) or face (3D) to which pressure boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureBCtoTraceID	VelocityCorrectionScheme.h	/^        Array<OneD, int> m_pressureBCtoTraceID; \/\/ Id of edge (2D) or face (3D) to which pressure boundary condition belongs$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureCalls	BackUp/VelocityCorrectionScheme.h	/^        int m_pressureCalls;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureCalls	VelocityCorrectionScheme.h	/^        int m_pressureCalls;$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureHBCs	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_pressureHBCs; \/\/< Storage for current and previous levels of high order pressure boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_pressureHBCs	VelocityCorrectionScheme.h	/^        Array<OneD, Array<OneD, NekDouble> >  m_pressureHBCs; \/\/< Storage for current and previous levels of high order pressure boundary conditions. $/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_previousVelFields	BackUp/IncNavierStokes.h	/^        Array<OneD, Array<OneD, NekDouble> > m_previousVelFields;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_previousVelFields	IncNavierStokes.h	/^        Array<OneD, Array<OneD, NekDouble> > m_previousVelFields;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_ptsInElmt	BackUp/VelocityCorrectionScheme.h	/^        int m_ptsInElmt;     \/\/ number of physical points of the element$/;"	m	struct:Nektar::HBCInfo	access:public
m_ptsInElmt	VelocityCorrectionScheme.h	/^        int m_ptsInElmt;     \/\/ number of physical points of the element$/;"	m	struct:Nektar::HBCInfo	access:public
m_showTimings	BackUp/VelocityCorrectionScheme.h	/^        bool m_showTimings;                     \/\/ Show timings for each step$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_showTimings	VelocityCorrectionScheme.h	/^        bool m_showTimings;                     \/\/ Show timings for each step$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_singleMode	BackUp/CoupledLinearNS.h	/^        bool m_singleMode; $/;"	m	class:Nektar::CoupledLinearNS	access:private
m_singleMode	CoupledLinearNS.h	/^        bool m_singleMode; $/;"	m	class:Nektar::CoupledLinearNS	access:private
m_steadyStateSteps	BackUp/IncNavierStokes.h	/^        int         m_steadyStateSteps; \/\/\/< Check for steady state at step interval$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_steadyStateSteps	IncNavierStokes.h	/^        int         m_steadyStateSteps; \/\/\/< Check for steady state at step interval$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_steadyStateTol	BackUp/IncNavierStokes.h	/^        NekDouble   m_steadyStateTol; \/\/\/< Tolerance to which steady state should be evaluated at$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_steadyStateTol	IncNavierStokes.h	/^        NekDouble   m_steadyStateTol; \/\/\/< Tolerance to which steady state should be evaluated at$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subStepIntegrationOps	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_subStepIntegrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subStepIntegrationOps	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeOperators m_subStepIntegrationOps;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subStepIntegrationScheme	BackUp/IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeSharedPtr m_subStepIntegrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subStepIntegrationScheme	IncNavierStokes.h	/^        LibUtilities::TimeIntegrationSchemeSharedPtr m_subStepIntegrationScheme;$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subSteppingScheme	BackUp/IncNavierStokes.h	/^        bool m_subSteppingScheme; \/\/ bool to identify if using a substepping scheme$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_subSteppingScheme	IncNavierStokes.h	/^        bool m_subSteppingScheme; \/\/ bool to identify if using a substepping scheme$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_tol	BackUp/CoupledLinearNS.h	/^        NekDouble   m_tol;        \/\/ Tolerence$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_tol	CoupledLinearNS.h	/^        NekDouble   m_tol;        \/\/ Tolerence$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_velocity	BackUp/IncNavierStokes.h	/^        Array<OneD, int> m_velocity; $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_velocity	IncNavierStokes.h	/^        Array<OneD, int> m_velocity; $/;"	m	class:Nektar::IncNavierStokes	access:protected
m_viscoelasticType	BackUp/IncNavierStokes.h	/^	ViscoElasticType m_viscoelasticType;   \/\/\/ViscoElastic Type$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_viscoelasticType	IncNavierStokes.h	/^	ViscoElasticType m_viscoelasticType;   \/\/\/ViscoElastic Type$/;"	m	class:Nektar::IncNavierStokes	access:protected
m_viscoelastictreatmentType	BackUp/ViscoElasticConstitutive.h	/^      ViscoElasticTreatmentType m_viscoelastictreatmentType; \/\/ ViscoElasticTreatment $/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
m_viscoelastictreatmentType	ViscoElasticConstitutive.h	/^      ViscoElasticTreatmentType m_viscoelastictreatmentType; \/\/ ViscoElasticTreatment $/;"	m	class:Nektar::ViscoElasticConstitutive	access:public
m_wavenumber	BackUp/VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_wavenumber;            \/\/ wave number 2 pi k \/Lz$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_wavenumber	VelocityCorrectionScheme.h	/^        Array<OneD, NekDouble>  m_wavenumber;            \/\/ wave number 2 pi k \/Lz$/;"	m	class:Nektar::VelocityCorrectionScheme	access:private
m_zeroMode	BackUp/CoupledLinearNS.h	/^        bool m_zeroMode;$/;"	m	class:Nektar::CoupledLinearNS	access:private
m_zeroMode	CoupledLinearNS.h	/^        bool m_zeroMode;$/;"	m	class:Nektar::CoupledLinearNS	access:private
v_DoInitialise	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoInitialise(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_DoInitialise	BackUp/CoupledLinearNS.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_DoInitialise	BackUp/IncNavierStokes.h	/^        virtual void v_DoInitialise(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_DoInitialise	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoInitialise(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_DoInitialise	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_DoInitialise	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoInitialise(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_DoInitialise	CoupledLinearNS.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_DoInitialise	IncNavierStokes.h	/^        virtual void v_DoInitialise(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_DoInitialise	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoInitialise(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_DoInitialise	VelocityCorrectionScheme.h	/^        virtual void v_DoInitialise(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_DoSolve	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoSolve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_DoSolve	BackUp/CoupledLinearNS.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_DoSolve	BackUp/IncNavierStokes.h	/^        virtual void v_DoSolve(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_DoSolve	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoSolve(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_DoSolve	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_DoSolve	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_DoSolve(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_DoSolve	CoupledLinearNS.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_DoSolve	IncNavierStokes.h	/^        virtual void v_DoSolve(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_DoSolve	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_DoSolve(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_DoSolve	VelocityCorrectionScheme.h	/^        virtual void v_DoSolve(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_GetFluxVector	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_GetFluxVector(const int i, $/;"	f	class:Nektar::IncNavierStokes	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
v_GetFluxVector	BackUp/IncNavierStokes.h	/^        virtual void v_GetFluxVector(const int i, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
v_GetFluxVector	IncNavierStokes.cpp	/^    void IncNavierStokes::v_GetFluxVector(const int i, $/;"	f	class:Nektar::IncNavierStokes	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
v_GetFluxVector	IncNavierStokes.h	/^        virtual void v_GetFluxVector(const int i, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(const int i, Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &flux)
v_GetForceDimension	BackUp/CoupledLinearNS.cpp	/^    int CoupledLinearNS::v_GetForceDimension()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
v_GetForceDimension	BackUp/CoupledLinearNS.h	/^        virtual int v_GetForceDimension(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_GetForceDimension	BackUp/VelocityCorrectionScheme.cpp	/^    int VelocityCorrectionScheme::v_GetForceDimension()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_GetForceDimension	BackUp/VelocityCorrectionScheme.h	/^        virtual int v_GetForceDimension();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
v_GetForceDimension	CoupledLinearNS.cpp	/^    int CoupledLinearNS::v_GetForceDimension()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
v_GetForceDimension	CoupledLinearNS.h	/^        virtual int v_GetForceDimension(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_GetForceDimension	VelocityCorrectionScheme.cpp	/^    int VelocityCorrectionScheme::v_GetForceDimension()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_GetForceDimension	VelocityCorrectionScheme.h	/^        virtual int v_GetForceDimension();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
v_GetPressure	BackUp/IncNavierStokes.h	/^        virtual MultiRegions::ExpListSharedPtr v_GetPressure()$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:()
v_GetPressure	IncNavierStokes.h	/^        virtual MultiRegions::ExpListSharedPtr v_GetPressure()$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:()
v_GetSystemSingularChecks	BackUp/VelocityCorrectionScheme.cpp	/^    Array<OneD, bool> VelocityCorrectionScheme::v_GetSystemSingularChecks()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_GetSystemSingularChecks	BackUp/VelocityCorrectionScheme.h	/^        virtual Array<OneD, bool> v_GetSystemSingularChecks();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
v_GetSystemSingularChecks	VelocityCorrectionScheme.cpp	/^    Array<OneD, bool> VelocityCorrectionScheme::v_GetSystemSingularChecks()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_GetSystemSingularChecks	VelocityCorrectionScheme.h	/^        virtual Array<OneD, bool> v_GetSystemSingularChecks();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:()
v_InitObject	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_InitObject()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
v_InitObject	BackUp/CoupledLinearNS.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:()
v_InitObject	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_InitObject()$/;"	f	class:Nektar::IncNavierStokes	signature:()
v_InitObject	BackUp/IncNavierStokes.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
v_InitObject	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_InitObject()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_InitObject	BackUp/VelocityCorrectionScheme.h	/^            virtual void v_InitObject();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
v_InitObject	BackUp/ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::v_InitObject()$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:()
v_InitObject	BackUp/ViscoElasticConstitutive.h	/^  void v_InitObject();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
v_InitObject	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_InitObject()$/;"	f	class:Nektar::CoupledLinearNS	signature:()
v_InitObject	CoupledLinearNS.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::CoupledLinearNS	access:protected	signature:()
v_InitObject	IncNavierStokes.cpp	/^    void IncNavierStokes::v_InitObject()$/;"	f	class:Nektar::IncNavierStokes	signature:()
v_InitObject	IncNavierStokes.h	/^        virtual void v_InitObject();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
v_InitObject	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_InitObject()$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:()
v_InitObject	VelocityCorrectionScheme.h	/^            virtual void v_InitObject();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
v_InitObject	ViscoElasticConstitutive.cpp	/^  void ViscoElasticConstitutive::v_InitObject()$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:()
v_InitObject	ViscoElasticConstitutive.h	/^  void v_InitObject();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
v_NumericalFlux	BackUp/IncNavierStokes.cpp	/^    void IncNavierStokes::v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
v_NumericalFlux	BackUp/IncNavierStokes.h	/^        virtual void v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
v_NumericalFlux	IncNavierStokes.cpp	/^    void IncNavierStokes::v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	f	class:Nektar::IncNavierStokes	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
v_NumericalFlux	IncNavierStokes.h	/^        virtual void v_NumericalFlux(Array<OneD, Array<OneD, NekDouble> > &physfield, $/;"	p	class:Nektar::IncNavierStokes	access:public	signature:(Array<OneD, Array<OneD, NekDouble> > &physfield, Array<OneD, Array<OneD, NekDouble> > &numflux)
v_Output	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_Output(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_Output	BackUp/CoupledLinearNS.h	/^        virtual void v_Output(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_Output	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_Output(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_Output	CoupledLinearNS.h	/^        virtual void v_Output(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_PrintSummary	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::CoupledLinearNS	signature:(std::ostream &out)
v_PrintSummary	BackUp/CoupledLinearNS.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(std::ostream &out)
v_PrintSummary	BackUp/IncNavierStokes.h	/^        virtual void v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(std::ostream &out)
v_PrintSummary	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(std::ostream &out)
v_PrintSummary	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(std::ostream &out)
v_PrintSummary	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::CoupledLinearNS	signature:(std::ostream &out)
v_PrintSummary	CoupledLinearNS.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(std::ostream &out)
v_PrintSummary	IncNavierStokes.h	/^        virtual void v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(std::ostream &out)
v_PrintSummary	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme::v_PrintSummary(std::ostream &out)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(std::ostream &out)
v_PrintSummary	VelocityCorrectionScheme.h	/^        virtual void v_PrintSummary(std::ostream &out);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(std::ostream &out)
v_TransCoeffToPhys	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransCoeffToPhys(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_TransCoeffToPhys	BackUp/CoupledLinearNS.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_TransCoeffToPhys	BackUp/IncNavierStokes.h	/^        virtual void v_TransCoeffToPhys(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_TransCoeffToPhys	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransCoeffToPhys(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_TransCoeffToPhys	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_TransCoeffToPhys	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransCoeffToPhys(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_TransCoeffToPhys	CoupledLinearNS.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_TransCoeffToPhys	IncNavierStokes.h	/^        virtual void v_TransCoeffToPhys(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_TransCoeffToPhys	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransCoeffToPhys(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_TransCoeffToPhys	VelocityCorrectionScheme.h	/^        virtual void v_TransCoeffToPhys(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_TransPhysToCoeff	BackUp/CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransPhysToCoeff(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_TransPhysToCoeff	BackUp/CoupledLinearNS.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_TransPhysToCoeff	BackUp/IncNavierStokes.h	/^        virtual void v_TransPhysToCoeff(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_TransPhysToCoeff	BackUp/VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransPhysToCoeff(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_TransPhysToCoeff	BackUp/VelocityCorrectionScheme.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
v_TransPhysToCoeff	CoupledLinearNS.cpp	/^    void CoupledLinearNS::v_TransPhysToCoeff(void)$/;"	f	class:Nektar::CoupledLinearNS	signature:(void)
v_TransPhysToCoeff	CoupledLinearNS.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::CoupledLinearNS	access:private	signature:(void)
v_TransPhysToCoeff	IncNavierStokes.h	/^        virtual void v_TransPhysToCoeff(void)$/;"	f	class:Nektar::IncNavierStokes	access:protected	signature:(void)
v_TransPhysToCoeff	VelocityCorrectionScheme.cpp	/^    void VelocityCorrectionScheme:: v_TransPhysToCoeff(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
v_TransPhysToCoeff	VelocityCorrectionScheme.h	/^        virtual void v_TransPhysToCoeff(void);$/;"	p	class:Nektar::VelocityCorrectionScheme	access:private	signature:(void)
~IncNavierStokes	BackUp/IncNavierStokes.cpp	/^    IncNavierStokes::~IncNavierStokes(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
~IncNavierStokes	BackUp/IncNavierStokes.h	/^        virtual ~IncNavierStokes();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
~IncNavierStokes	IncNavierStokes.cpp	/^    IncNavierStokes::~IncNavierStokes(void)$/;"	f	class:Nektar::IncNavierStokes	signature:(void)
~IncNavierStokes	IncNavierStokes.h	/^        virtual ~IncNavierStokes();$/;"	p	class:Nektar::IncNavierStokes	access:public	signature:()
~VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.cpp	/^        VelocityCorrectionScheme::~VelocityCorrectionScheme(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
~VelocityCorrectionScheme	BackUp/VelocityCorrectionScheme.h	/^            virtual ~VelocityCorrectionScheme();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
~VelocityCorrectionScheme	VelocityCorrectionScheme.cpp	/^        VelocityCorrectionScheme::~VelocityCorrectionScheme(void)$/;"	f	class:Nektar::VelocityCorrectionScheme	signature:(void)
~VelocityCorrectionScheme	VelocityCorrectionScheme.h	/^            virtual ~VelocityCorrectionScheme();$/;"	p	class:Nektar::VelocityCorrectionScheme	access:public	signature:()
~ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.cpp	/^  ViscoElasticConstitutive::~ViscoElasticConstitutive(void)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(void)
~ViscoElasticConstitutive	BackUp/ViscoElasticConstitutive.h	/^        virtual ~ViscoElasticConstitutive();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
~ViscoElasticConstitutive	ViscoElasticConstitutive.cpp	/^  ViscoElasticConstitutive::~ViscoElasticConstitutive(void)$/;"	f	class:Nektar::ViscoElasticConstitutive	signature:(void)
~ViscoElasticConstitutive	ViscoElasticConstitutive.h	/^        virtual ~ViscoElasticConstitutive();$/;"	p	class:Nektar::ViscoElasticConstitutive	access:public	signature:()
